<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kevin Yap</title><link href="http://kevinyap.ca/" rel="alternate"></link><link href="http://kevinyap.ca/atom.xml" rel="self"></link><id>http://kevinyap.ca/</id><updated>2023-10-19T04:37:07-07:00</updated><entry><title>Building a Hackintosh</title><link href="http://kevinyap.ca/2021/01/building-a-hackintosh/" rel="alternate"></link><published>2021-01-23T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2021-01-23:/2021/01/building-a-hackintosh/</id><summary type="html">&lt;p&gt;2020 was an exciting year for Mac users because Apple finally released computers powered by their own custom silicon. Despite this, for some reason, it was the year that I finally caved and decided to build a Hackintosh. For about 7 years …&lt;/p&gt;</summary><content type="html">&lt;p&gt;2020 was an exciting year for Mac users because Apple finally released computers powered by their own custom silicon. Despite this, for some reason, it was the year that I finally caved and decided to build a Hackintosh. For about 7 years, I only ever owned laptops, and the 15&amp;#8221; MacBook Pro was what I used as a &amp;#8220;desktop substitute&amp;#8221;. I liked the idea of using a portable as my primary machine, as it meant that whether I was at home, at school, or traveling, I would have access to all of my files. In addition, the most intensive activities that I used my computer for were compiling code and playing League — both workloads that MacBook Pro can easily&amp;nbsp;handle.&lt;/p&gt;
&lt;p&gt;However, when Riot released &lt;span class="caps"&gt;VALORANT&lt;/span&gt;, that was the first &lt;span class="caps"&gt;PC&lt;/span&gt; game that pushed the performance of the machine. To Riot&amp;#8217;s credit, the game is impressively well-optimized for lower-spec devices, and I was used to playing on minimal graphical settings from my Team Fortress 2 days (loading custom ultra-low spec configs to gain every last frame), but once I started streaming gameplay for archival purposes, that really started to push the limits of the&amp;nbsp;laptop.&lt;/p&gt;
&lt;p&gt;Perhaps the straw that finally broke the camel&amp;#8217;s back is that one day I noticed that my laptop kind of… rocked back and forth on a flat surface, and it turns out that was because the battery was starting to bulge. Feeling guilty that this was probably a result of me stressing it whilst in clamshell mode for several hours at a time, I decided it was time to build a real desktop &lt;span class="caps"&gt;PC&lt;/span&gt; to play the games that I wanted to play. Since one of my other friends who feels equally strongly about macOS built a dual-booting Hackintosh earlier this year without much trouble (allegedly), I was convinced. Also, Apple&amp;#8217;s move to ditch Intel and move to native silicon suggests that macOS compatibility will only become worse as time goes on, meaning I might as well get in on the action&amp;nbsp;now.&lt;/p&gt;
&lt;h2&gt;Onto the&amp;nbsp;Build&lt;/h2&gt;
&lt;p&gt;In terms of hardware, I decided to choose a part list nearly identical to &lt;a href="https://infinitediaries.net/my-2020-hackintosh-hardware-spec/"&gt;another one&lt;/a&gt; that I found online that reportedly had good compatibility with macOS. My only non-negotiable was having Thunderbolt 3 support; without it, running my UltraWide monitor at native resolution would be a huge hassle. As nice as it would have been use an &lt;span class="caps"&gt;AMD&lt;/span&gt; &lt;span class="caps"&gt;CPU&lt;/span&gt; or an &lt;span class="caps"&gt;NVIDIA&lt;/span&gt; &lt;span class="caps"&gt;GPU&lt;/span&gt;, the benefits did not outweigh the lack of easy compatibility in my mind, so an i9-9900K and the &lt;span class="caps"&gt;RX&lt;/span&gt; 5700 &lt;span class="caps"&gt;XT&lt;/span&gt; was the best I could do. Since every build needs a spec list, here we&amp;nbsp;go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Motherboard&lt;/em&gt;: Gigabyte Z390 Aorus&amp;nbsp;Ultra&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;CPU&lt;/span&gt;&lt;/em&gt;: Intel Core&amp;nbsp;i9-9900K&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;GPU&lt;/span&gt;&lt;/em&gt;: Gigabyte Aorus Radeon &lt;span class="caps"&gt;RX&lt;/span&gt; 5700 &lt;span class="caps"&gt;XT&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;RAM&lt;/span&gt;&lt;/em&gt;: 4×&lt;span class="caps"&gt;16GB&lt;/span&gt; 3600MHz &lt;span class="caps"&gt;DDR4&lt;/span&gt; HyperX&amp;nbsp;Fury&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Storage&lt;/em&gt;: Samsung 970 &lt;span class="caps"&gt;EVO&lt;/span&gt; &lt;span class="caps"&gt;2TB&lt;/span&gt; (macOS), &lt;span class="caps"&gt;500GB&lt;/span&gt;&amp;nbsp;(Windows)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Case&lt;/em&gt;: Fractal Design Meshify&amp;nbsp;C&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;PSU&lt;/span&gt;&lt;/em&gt;: Seasonic Prime 850&amp;nbsp;Titanium&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;TB3&lt;/span&gt; Card&lt;/em&gt;: Gigabyte Titan Ridge&amp;nbsp;2.0&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class="caps"&gt;CPU&lt;/span&gt; Cooler&lt;/em&gt;: Noctua &lt;span class="caps"&gt;NH&lt;/span&gt;-D15&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Case Fans&lt;/em&gt;: 3× Noctua &lt;span class="caps"&gt;NF&lt;/span&gt;-A14, 1× Noctua &lt;span class="caps"&gt;NF&lt;/span&gt;-&lt;span class="caps"&gt;S12A&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Building a &lt;span class="caps"&gt;PC&lt;/span&gt; feels like a rite of passage of sorts for the types of people who spend the majority of their waking hours using a computer, so I was very excited to finally get to partake in it. Having not ever built a computer before, I prepared by watching far too many build videos (primarily from Vancouver-based &lt;a href="https://www.youtube.com/user/LinusTechTips"&gt;Linus Tech Tips&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The build itself went fairly smoothly, with the exception of the fact that the Noctua &lt;span class="caps"&gt;CPU&lt;/span&gt; cooler I went with is so incredibly massive that once it&amp;#8217;s installed, it&amp;#8217;s very tough to access a lot of other parts of the motherboard, including the PCIe release tab. This was an issue when I first booted the system and the &lt;span class="caps"&gt;GPU&lt;/span&gt; fan was spinning at 100% and I thought I might have had a faulty card, but somehow after installing some drivers on the Windows side, it thankfully fixed&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;Rather miraculously, Thunderbolt worked without having to do anything special, and was able to drive my monitor at full resolution. For some reason, though, &lt;span class="caps"&gt;USB&lt;/span&gt; doesn&amp;#8217;t work over Thunderbolt, and I figure it has something to do with the &lt;span class="caps"&gt;USB&lt;/span&gt; cable connected to the Titan Ridge card. However, I didn&amp;#8217;t want to fiddle with the internal cabling anymore, so I decided to just connect all my peripherals over &lt;span class="caps"&gt;USB&lt;/span&gt; like&amp;nbsp;normal.&lt;/p&gt;
&lt;p&gt;I couldn&amp;#8217;t get OpenCore (the macOS bootloader) to work the first few times I tried, despite my friend telling me nothing special was required other than &amp;#8220;following &lt;a href="https://dortania.github.io/OpenCore-Install-Guide/"&gt;the guide&lt;/a&gt;&amp;#8220;, so I gave up on it for a couple weeks, as I was mostly focused on preparing for &lt;a href="https://na.leagueoflegends.com/en-us/news/game-updates/worlds-2020-clash-details/"&gt;Clash tournaments&lt;/a&gt; in League, which Windows was perfectly capable of&amp;nbsp;running.&lt;/p&gt;
&lt;p&gt;After reading through the guide more carefully, it turns out I had everything right except for missing a boot argument that was required for Navi GPUs (which the &lt;span class="caps"&gt;RX&lt;/span&gt; 5700 &lt;span class="caps"&gt;XT&lt;/span&gt; is). Making that fix allowed macOS to install, and to my delight, basically everything worked perfectly out of the box, including things like iMessage and iCloud — even native Screen Sharing — which apparently takes extra fiddling for some people&amp;#8217;s&amp;nbsp;builds.&lt;/p&gt;
&lt;p&gt;My delight quickly turned into panic when I tried booting back into Windows, though, and found that choosing that boot option from the &lt;span class="caps"&gt;BIOS&lt;/span&gt; would just infinitely loop me back to the &lt;span class="caps"&gt;BIOS&lt;/span&gt;. This was compounded by the fact that I was doing this on a Friday evening, and was due to play in the next round of Clash tournaments the next day, and while I &lt;em&gt;could&lt;/em&gt; have played on macOS, I had grown used to my Windows setup for&amp;nbsp;League.&lt;/p&gt;
&lt;p&gt;After half an hour of frantic Googling, I was pretty confident that the OpenCore installation process had somehow destroyed Windows&amp;#8217; &lt;span class="caps"&gt;EFI&lt;/span&gt; bootloader, and that was why I was hitting a boot loop. I took the &lt;span class="caps"&gt;USB&lt;/span&gt; drive that I had stuck OpenCore on and reformatted it with a fresh copy of the Windows 10 installation media, which was funny because that drive &lt;em&gt;already had&lt;/em&gt; Windows 10 on it before I replaced &lt;em&gt;that&lt;/em&gt; with OpenCore (I only had one &lt;span class="caps"&gt;USB&lt;/span&gt; drive in my apartment). After booting from the installation media, I was able to restore things back to&amp;nbsp;normal.&lt;/p&gt;
&lt;h2&gt;My Debugging&amp;nbsp;Experiences&lt;/h2&gt;
&lt;p&gt;This is the part of the blog post where I describe the problems I ran into, and hope that Google picks up on keywords so that other people can find the&amp;nbsp;fixes.&lt;/p&gt;
&lt;h3&gt;Unable to boot Windows after installing&amp;nbsp;macOS&lt;/h3&gt;
&lt;p&gt;This was the issue that I talked about a bit earlier, where after successfully booting macOS for the first time, I was unable to actually boot back into Windows. I think what caused this was me deleting the &lt;code&gt;MICROSOFT&lt;/code&gt; folder from the &lt;span class="caps"&gt;EFI&lt;/span&gt;, though I can&amp;#8217;t remember if I actually did this, or if it was a side effect of the installation process. Either way, it wasn&amp;#8217;t present, and I needed to boot from Windows installation media to properly reinstate the boot&amp;nbsp;info.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.reddit.com/r/hackintosh/comments/hn3gwr/accidentally_deleted_microsoft_folder_from_efi/"&gt;This Reddit post&lt;/a&gt; is what I referenced, which boils down to entering Command Prompt from the installation media and using &lt;code&gt;diskpart&lt;/code&gt; to find the system and Windows partitions, then running &lt;code&gt;bcdboot&lt;/code&gt; against the system partition to set up the boot files&amp;nbsp;properly.&lt;/p&gt;
&lt;h3&gt;Clamped Audio in&amp;nbsp;macOS&lt;/h3&gt;
&lt;p&gt;This one was a bit weirder; when I thought everything was working properly, I noticed that I couldn&amp;#8217;t raise the volume past ~5 &amp;#8220;ticks&amp;#8221; of the macOS volume picker; any louder and the meter would go up, but the volume would stay the same. In addition, when watching YouTube, louder moments would create a sort of &amp;#8220;audio rubberbanding&amp;#8221; where the volume would adjust itself below this imaginary threshold, but at slightly different times in each audio channel, making it very&amp;nbsp;annoying.&lt;/p&gt;
&lt;p&gt;The solution to this ended up being a bad layout &lt;span class="caps"&gt;ID&lt;/span&gt;, and the OpenCore post-install guide actually &lt;a href="https://dortania.github.io/OpenCore-Post-Install/universal/audio.html#finding-your-layout-id"&gt;explains how to solve this&lt;/a&gt;. However, their proposal to try all valid layout IDs for your audio codec was off-putting, since that would&amp;#8217;ve meant trial-and-erroring over 10 different options, so I put off making this fix initially. However, another Reddit thread suggested just trying layout 7 (ie. adding &lt;code&gt;alcid=7&lt;/code&gt; as one of the &lt;code&gt;boot-args&lt;/code&gt;), and it turns out that did the&amp;nbsp;trick.&lt;/p&gt;
&lt;h3&gt;Mounting macOS &lt;span class="caps"&gt;EFI&lt;/span&gt; partition from&amp;nbsp;Windows&lt;/h3&gt;
&lt;p&gt;Later on, I was attempting to mess with my OpenCore configuration to get OpenCanopy working for a more visually appealing boot screen, but OpenCore wasn&amp;#8217;t happy with the new configuration and fatal error&amp;#8217;d immediately when trying to start up, meaning it was impossible to boot macOS at&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;Fortunately, it&amp;#8217;s still possible to boot directly into Windows from the &lt;span class="caps"&gt;BIOS&lt;/span&gt;&amp;#8217; boot selector, and then from Windows you can mount macOS&amp;#8217; &lt;span class="caps"&gt;EFI&lt;/span&gt; partition and undo bad configuration changes from Windows. I followed the instructions on &lt;a href="https://manjaro.site/how-to-mount-macos-efi-partition-from-windows-10/"&gt;this page&lt;/a&gt; to do so: essentially, using &lt;code&gt;diskpart&lt;/code&gt; to find and mount the Hackintosh disk and then the &lt;span class="caps"&gt;EFI&lt;/span&gt; partition, then doing normal Windows file operations to restore the configuration files back to a bootable&amp;nbsp;state.&lt;/p&gt;
&lt;h3&gt;Cursed Audio&amp;nbsp;Crash&lt;/h3&gt;
&lt;p&gt;The one rather severe issue that I started to notice a couple of months in was that sometimes when attempting to stream Advent of Code, my computer would lock up, but not in the way that I&amp;#8217;m used to. The screen would freeze, and audio that was playing began to stutter slightly before completely cutting out. However, the &lt;span class="caps"&gt;OS&lt;/span&gt; would never fully get to a kernel panic, so a hard power cycle was the only way to recover. Rather obnoxiously, this happened very infrequently (only twice out of the 25 days that I streamed Advent of Code), so it was difficult to root cause or debug. In addition, since it never actually panicked, there wasn&amp;#8217;t any useful information in Console.app to make heads or tails&amp;nbsp;of.&lt;/p&gt;
&lt;p&gt;There were a couple of clues that helped narrow down the cause; namely, the fact that the freeze only seemed to happen while I had Twitch Studio (the broadcasting software I use on macOS) open suggested it was somehow related to a more intensive system process, and the strange audio behaviour made me suggest that the audio stack was to&amp;nbsp;blame.&lt;/p&gt;
&lt;p&gt;After some searching, I stumbled upon &lt;a href="https://www.reddit.com/r/hackintosh/comments/dmn84u/rx_vega_64_freezes_system_during_hw_accel_encode/"&gt;this Reddit post&lt;/a&gt; in which someone with an &lt;span class="caps"&gt;RX&lt;/span&gt; Vega 64 (a similar graphics card to my own) had system freezes when performing hardware-accelerated audio encoding. They recommended running a &lt;code&gt;log&lt;/code&gt; command to stream kernel-related logs to a file, such that when the crash occurred, it would dump the logs before the system failed, meaning information would be captured even though no kernel panic was actually&amp;nbsp;produced.&lt;/p&gt;
&lt;p&gt;Fortunately, the crash &lt;em&gt;did&lt;/em&gt; happen during a day where I happened to remember to run the command at startup, and much like the discussion that went on in the comments of that Reddit post, the logs right before the crash seemed to be audio-related, and &lt;code&gt;AppleGFXHDA.kext&lt;/code&gt; was the culprit. I disabled the extension by renaming it (which meant I had to first disable &lt;span class="caps"&gt;SIP&lt;/span&gt;, something I didn&amp;#8217;t initially intend to do on my Hackintosh), and I haven&amp;#8217;t witnessed the crash since, so I&amp;#8217;m guessing that solved&amp;nbsp;it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;All in all, building a Hackintosh was a really fun experience, and I realized just how sheltered I was from the whole world of &amp;#8220;how modern PCs really work&amp;#8221;. I always just nodded my head and pretended to understand when people at work or friends would talk about their &lt;em&gt;&lt;span class="caps"&gt;BIOS&lt;/span&gt;&lt;/em&gt; and stuff like that, but now I can at least sort of join in on those discussions. Of course, now I&amp;#8217;m a bit sad that I won&amp;#8217;t be able to justify buying an M1 Mac anytime&amp;nbsp;soon.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Architecting zeal.gg</title><link href="http://kevinyap.ca/2020/03/architecting-zeal-gg/" rel="alternate"></link><published>2020-03-01T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2020-03-01:/2020/03/architecting-zeal-gg/</id><summary type="html">&lt;p&gt;Back while I was interning at Riot Games, I spent one weekend throwing together a prototype for what would eventually become &lt;a href="https://zeal.gg"&gt;zeal.gg&lt;/a&gt;. The purpose of it was to graph the &lt;a href="https://support-leagueoflegends.riotgames.com/hc/en-us/articles/204010760"&gt;solo queue ranking&lt;/a&gt; of our intern cohort while we were working …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Back while I was interning at Riot Games, I spent one weekend throwing together a prototype for what would eventually become &lt;a href="https://zeal.gg"&gt;zeal.gg&lt;/a&gt;. The purpose of it was to graph the &lt;a href="https://support-leagueoflegends.riotgames.com/hc/en-us/articles/204010760"&gt;solo queue ranking&lt;/a&gt; of our intern cohort while we were working there, since like most of the League of Legends population, a handful of us got really competitive about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;I ended up registering the domain name for fun; &lt;em&gt;Zeal&lt;/em&gt; is an item you can purchase in the game, and I was surprised to find that such a short domain name wasn&amp;#8217;t taken yet. Having a nice domain gave me grander ambitions for the site &amp;#8212; I wanted to polish it up and make it available for other League players to use with their friend groups as&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;This was the perfect task to occupy my free time, since I ended up taking the fall semester of my the final year of my undergrad off. While the initial &lt;span class="caps"&gt;MVP&lt;/span&gt; was a single page that graphed our ranks, the final product would need a landing page where anyone could create a leaderboard for their own friend&amp;nbsp;group.&lt;/p&gt;
&lt;p&gt;I worked on final version of the site during November and December, and made an &lt;a href="https://www.reddit.com/r/leagueoflegends/comments/agp6qj/introducing_zealgg_custom_solo_queue_leaderboards"&gt;announcement on /r/leagueoflegends&lt;/a&gt; the week before the new ranked season started the following January. To my surprise, over 10k people visited the site on the day I made the post, and I continued to have hundreds of consistent users for weeks afterwards! To top it all off, it still hasn&amp;#8217;t gone down yet: a mild reassurance that I at least somewhat know what I&amp;#8217;m doing in this&amp;nbsp;profession.&lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;Stack&lt;/h2&gt;
&lt;p&gt;I learned a ton building the site; taking an idea from inception to production involves so much more than anything taught in school (which is the reason that working on personal projects is an oft-encouraged activity for those trying to break into the industry). I&amp;#8217;ve been asked on a number of occasions about the tech stack powering the site, so here it&amp;nbsp;is.&lt;/p&gt;
&lt;h3&gt;Heroku&lt;/h3&gt;
&lt;p&gt;For personal projects, I almost always use Heroku, mostly because I don&amp;#8217;t want to have to worry about manually managing the uptime of all of the processes / databases involved; this is something that I will happily pay Heroku to do for&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;Heroku greatly simplifies my deployment story. I actually have two apps in the same &lt;a href="https://devcenter.heroku.com/articles/pipelines"&gt;pipeline&lt;/a&gt; &amp;#8212; one for staging and one for production. Changes pushed to &lt;code&gt;master&lt;/code&gt; are automatically built and deployed to the staging site, which has its own staging database. Once I am confident that changes are stable, I use Heroku&amp;#8217;s &lt;span class="caps"&gt;CLI&lt;/span&gt; tool to &amp;#8220;promote&amp;#8221; that build to the production app, where it is deployed to the main&amp;nbsp;site.&lt;/p&gt;
&lt;h3&gt;Flask&lt;/h3&gt;
&lt;p&gt;Python is slow: we&amp;#8217;ve all heard it before. However, I am extremely comfortable with Python and its ecosystem, so that&amp;#8217;s what the backend is written in. While it would have been cool to write my backend in Rust (the other language I like using for side projects), I suspect the &lt;span class="caps"&gt;MVP&lt;/span&gt; would have taken far more than a single weekend, and I likely would have lost interest in the project before even&amp;nbsp;making.&lt;/p&gt;
&lt;p&gt;In my opinion, pick whatever stack you&amp;#8217;re most comfortable with and roll with it. I honestly don&amp;#8217;t think the choice of backend server technology is anywhere close to one of the most important choices when it comes to personal projects &amp;#8212; let&amp;#8217;s be honest, most side projects will be measuring performance on the order of &lt;span class="caps"&gt;QPM&lt;/span&gt; rather than &lt;span class="caps"&gt;QPS&lt;/span&gt;.&lt;/p&gt;
&lt;h3&gt;Postgres&lt;/h3&gt;
&lt;p&gt;Unsurprisingly, this is where the data for the backend is stored. This includes things like tables containing player info, rank information per player per day, and which players should be associated with which leaderboards. Postgres is my go-to database whenever I need one. I get to use &lt;a href="https://eggerapps.at/postico/"&gt;Postico&lt;/a&gt; which is a really nice macOS application, and Heroku has first-class support for hosted Postgres&amp;nbsp;instances.&lt;/p&gt;
&lt;p&gt;It might have been cool to experiment with something like &lt;a href="https://www.timescale.com"&gt;TimescaleDB&lt;/a&gt;, given the fact that the site is essentially a time series graph of people&amp;#8217;s ranks and also that it&amp;#8217;s backed by Postgres, but I decided it wasn&amp;#8217;t worth the extra overhead of figuring out how to deploy and work with it. Vanilla Postgres is virtually always good&amp;nbsp;enough.&lt;/p&gt;
&lt;h3&gt;Redis&lt;/h3&gt;
&lt;p&gt;zeal.gg is simple enough that I probably didn&amp;#8217;t anything more than Flask &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Postgres to back it, but I actually &lt;em&gt;did&lt;/em&gt; want to experiment with Redis, as it&amp;#8217;s a solid piece of technology, and probably has the &lt;a href="https://github.com/antirez/redis"&gt;cleanest codebase&lt;/a&gt; out of any C project that I know of. zeal.gg uses Redis to do some simple caching, act as a small state-store across backend &lt;span class="caps"&gt;API&lt;/span&gt; instances, and also to power a job queue (more on that&amp;nbsp;later).&lt;/p&gt;
&lt;h3&gt;React&lt;/h3&gt;
&lt;p&gt;The frontend of the site is built in React, with Chart.js doing the heavy-lifting for drawing the actual graphs. My data visualization skills are nowhere near good enough to have leveraged the power offered by something like&amp;nbsp;D3.&lt;/p&gt;
&lt;p&gt;Why React and not something like Angular or Vue? I learned React for the stuff I was working on at Riot at the time, and having a frontend framework under my belt was the sole reason it was possible for me to build a site like this in the first&amp;nbsp;place.&lt;/p&gt;
&lt;h2&gt;Technical Decisions &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt;&amp;nbsp;Challenges&lt;/h2&gt;
&lt;p&gt;There were a few non-trivial things that I had to solve when building the site. Figuring out solutions to these was truly the fun part, and also demonstrates why good design work is so important when it comes to software&amp;nbsp;engineering.&lt;/p&gt;
&lt;h3&gt;No User&amp;nbsp;Logins&lt;/h3&gt;
&lt;p&gt;I knew from the very start that I did &lt;em&gt;not&lt;/em&gt; want to support any sort of user logins or anything related; I wasn&amp;#8217;t about to put myself in the position where I had to start worrying about credentials for a site this simple. The Riot &lt;span class="caps"&gt;API&lt;/span&gt; actually supports a feature where players can &amp;#8220;verify&amp;#8221; their identity by logging into League and entering a code that is provided by a third-party tool &amp;#8212; I briefly considered somehow making use of this, but quickly decided the complexity was not at all worth&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;As a result, this meant that leaderboards are completely immutable. I had a few people request the ability to, say, add or edit the players contained in a single leaderboard, which isn&amp;#8217;t possible under this model. I figured that being able to just create a new leaderboard with the updated player set would be good enough, and I still believe this is the&amp;nbsp;case.&lt;/p&gt;
&lt;h3&gt;Nice Leaderboard&amp;nbsp;URLs&lt;/h3&gt;
&lt;p&gt;One feature that I definitely wanted included in zeal.gg was having short URLs for each leaderboard, inspired by link shorteners. While having the leaderboard URLs simply be the concatenation of the player names contained within that leaderboard, this wasn&amp;#8217;t ideal. The URLs would be very long, and since people can rename their accounts, the same &lt;span class="caps"&gt;URL&lt;/span&gt; would break if a single player decided to change their name. Because the backend tracks players by their account &lt;span class="caps"&gt;ID&lt;/span&gt;, it is able to still recognize a single player across name changes, so having the notion of a mapping between &amp;#8220;accounts&amp;#8221; and &amp;#8220;leaderboards&amp;#8221; was definitely the way to&amp;nbsp;go.&lt;/p&gt;
&lt;p&gt;For some background, the leaderboard links look like &lt;code&gt;zeal.gg/BnIS8Hr&lt;/code&gt;. To generate these links, I hash a concatenation of all the player IDs that a given leaderboards comprises. The list is sorted to ensures that different permutations of the same players will be pointed to the same leaderboard, and a connector character is used to join the IDs to prevents situations where a leaderboard with players &lt;code&gt;AB&lt;/code&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;code&gt;BC&lt;/code&gt; are treated as&amp;nbsp;equivalent.&lt;/p&gt;
&lt;p&gt;When a user attempts to create a new leaderboard, I generate the corresponding hash, and take the first 7 characters of its base64 encoding. If this ends up colliding with an existing leaderboard (unlikely but possible), I take more characters of the hash until we reach a unique &lt;span class="caps"&gt;URL&lt;/span&gt;. While this feels a bit hacky and there&amp;#8217;s probably a better way to do it, it seems to do the&amp;nbsp;job.&lt;/p&gt;
&lt;h3&gt;All the World on One&amp;nbsp;Dyno&lt;/h3&gt;
&lt;p&gt;One caveat with using Heroku is that I wanted to deploy the entire site within a single &amp;#8220;project&amp;#8221;. However, only one dyno within any given project can function as the &amp;#8220;web&amp;#8221; dyno (which serves &lt;span class="caps"&gt;HTTP&lt;/span&gt; requests), so it was not feasible to spin up the frontend and backend on different dynos: there could only be&amp;nbsp;one.&lt;/p&gt;
&lt;p&gt;To solve this problem, I used &lt;a href="http://nginx.org"&gt;nginx&lt;/a&gt;, which sits at the very front of Heroku. The dyno spins up four nginx workers and four instances of the  &lt;span class="caps"&gt;API&lt;/span&gt; (which compensated for the fact that Flask handles requests synchronously), and directs any requests to &lt;code&gt;/api/*&lt;/code&gt; to one of them. All other requests are routed to serve the static React frontend that is built during the site&amp;nbsp;deploy.&lt;/p&gt;
&lt;p&gt;This comes with another unintended benefit. Another approach could have just been to have the Flask workers themselves serve the static files. However, by siloing off requests to the &lt;span class="caps"&gt;API&lt;/span&gt; and letting nginx serve the frontend, it means that the website remains responsive regardless of how much load is on the &lt;span class="caps"&gt;API&lt;/span&gt; at any given point in&amp;nbsp;time.&lt;/p&gt;
&lt;h3&gt;Global Timeout&amp;nbsp;State&lt;/h3&gt;
&lt;p&gt;In my initial vision for the site, I wanted to refresh everyone&amp;#8217;s data on a periodic basis, so there would be no need for a manual refresh button on leaderboards. However, the site quickly scaled to a point where I would far exceed my allotted rate limit if I were to do this on anywhere near a regular-enough basis. This was exacerbated by the fact that people would often create a leaderboard to try out the site, and never come back. Would I then be on the hook for refreshing this data? I iterated on solutions to this &amp;#8212; tracking which leaderboards were visited and keeping maintaining a set of &amp;#8220;active players&amp;#8221;, whose data &lt;em&gt;would&lt;/em&gt; be refreshed, while letting others rest&amp;nbsp;dormant.&lt;/p&gt;
&lt;p&gt;In the end, though, manual refreshes work just fine from a &lt;span class="caps"&gt;UX&lt;/span&gt; perspective, and this is how most League websites operate anyways. The new problem was needing to add a timeout for said refreshes; it would be a waste to allow someone to repeatedly request a leaderboard refresh, since rank data changes on the order of minutes to hours. Since there are multiple instances of the backend running (and requests are distributed across them), simply storing in-memory whether a leaderboard is on its cooldown period won&amp;#8217;t&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;This is where having Redis around was perfect. The &amp;#8220;timeout&amp;#8221; of a leaderboard isn&amp;#8217;t something that I would really want to store within Postgres, but it was perfectly suitable for Redis. The backend writes a value keyed on a leaderboard&amp;#8217;s unique &lt;span class="caps"&gt;ID&lt;/span&gt; when a refresh is triggered, with the corresponding expiry; upon loading a leaderboard, the existence of that key is checked to determine whether refreshing should be allowed. Redis&amp;#8217; native key expiry made this very simple to&amp;nbsp;implement.&lt;/p&gt;
&lt;h3&gt;Long-Running&amp;nbsp;Operations&lt;/h3&gt;
&lt;p&gt;Creating and refreshing a leaderboard can take a while, as the bottleneck is the Riot &lt;span class="caps"&gt;API&lt;/span&gt;. I have leaderboards capped at 12 players, meaning a single request might require as many as 12 different calls to the Riot &lt;span class="caps"&gt;API&lt;/span&gt;. Parallelizing would help a bit, but the response time of an external &lt;span class="caps"&gt;API&lt;/span&gt; isn&amp;#8217;t something that I wanted bogging down my own &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To make matters even more worse, since Flask handles requests synchronously, waiting for all external &lt;span class="caps"&gt;API&lt;/span&gt; calls to resolve before completing the request would hog up the backend for much too long, and the performance of the site would be&amp;nbsp;abysmal.&lt;/p&gt;
&lt;p&gt;My solution to this was to use a job queue to run these operations in the background. &lt;a href="https://github.com/rq/rq"&gt;&lt;code&gt;RQ&lt;/code&gt;&lt;/a&gt; is a Python library that essentially lets function invocations be queued up as jobs instead of being executed in the current process, and it&amp;#8217;s backed by&amp;nbsp;Redis.&lt;/p&gt;
&lt;p&gt;When a user tries to make a new leaderboard or refresh an existing one, the frontend calls an &lt;span class="caps"&gt;API&lt;/span&gt; endpoint that creates a new &amp;#8220;create/refresh leaderboard&amp;#8221; job. The &lt;span class="caps"&gt;API&lt;/span&gt; exposes a &amp;#8220;job status&amp;#8221; endpoint, which gets polled every couple of seconds. When the job has completed, the frontend either redirects the user to the new leaderboard or reloads the page to reflect the refreshed&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;This is simply an implementation detail that is not exposed to the end-user, and I&amp;#8217;m particularly proud with how it turned out from a &lt;span class="caps"&gt;UX&lt;/span&gt; perspective. When creating a leaderboard, I draw a loading bar that slowly progresses to give the impression that it&amp;#8217;s only making a single, long-running request. When refreshing a leaderboard, the refresh icon spins until the job completes and the page&amp;nbsp;reloads.&lt;/p&gt;
&lt;h3&gt;Site&amp;nbsp;Announcements&lt;/h3&gt;
&lt;p&gt;I realized pretty early on that I would need some way of pushing notifications to the site, to alert users in case of an impending maintenance period or to outline new features. However, I didn&amp;#8217;t want to simply hard-code alerts and have to redeploy the site whenever they changed; I wanted some way of generating them&amp;nbsp;dynamically.&lt;/p&gt;
&lt;p&gt;Since I had already created a &lt;a href="https://www.reddit.com/r/zealgg/"&gt;subreddit&lt;/a&gt; to discuss changes to the site, I decided to leverage it. I added an endpoint to the backend that uses Reddit&amp;#8217;s &lt;span class="caps"&gt;API&lt;/span&gt; to check for any posts pinned on the subreddit. The frontend calls that endpoint, and if it finds a pinned post, it displays an alert using the title of the post as the alert text, and links to the full post for futher&amp;nbsp;context.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Even though zeal.gg is pretty straightforward at its core, it fills a niche that, to the best of my knowledge, wasn&amp;#8217;t served by any other of the multitude of League of Legends websites out there. Figuring out that I had the skills to go from &lt;em&gt;&amp;#8220;this would be a cool idea to make for my friends&amp;#8221;&lt;/em&gt; to a site that tens of thousands of League players around the world decided to check out cured my imposter syndrome for a fleeting&amp;nbsp;moment.&lt;/p&gt;
&lt;p&gt;At some point, when I feel like it&amp;#8217;s not worth paying the few dollars a month to host the site anymore, I&amp;#8217;ll get around to open-sourcing the repository. For now though, I&amp;#8217;m keeping the code private, mostly to protect everyone else from laying their eyes upon the monstrosity of the main leaderboard React&amp;nbsp;component.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>The Year of Communication</title><link href="http://kevinyap.ca/2020/02/the-year-of-communication/" rel="alternate"></link><published>2020-02-24T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2020-02-24:/2020/02/the-year-of-communication/</id><summary type="html">&lt;p&gt;The idea of a new year being a time to reflect and set goals always felt reasonable to me, though I had never set any personally. I think I had always (correctly) predicted the difficulty of sticking with a single resolution for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The idea of a new year being a time to reflect and set goals always felt reasonable to me, though I had never set any personally. I think I had always (correctly) predicted the difficulty of sticking with a single resolution for the entire year, even past the honeymoon phase of the first couple of weeks of&amp;nbsp;January.&lt;/p&gt;
&lt;p&gt;Despite this, near the end of last decade, I decided to set a goal for myself &amp;#8212; I wanted to start journaling &lt;em&gt;on paper&lt;/em&gt;. Throughout my time learning how to become a functional human on this planet with actual responsibilities, I&amp;#8217;ve gone through way too many different productivity and to-do apps in the quest to find one that &amp;#8220;just works&amp;#8221; (and have toyed on more than one occasion with the idea of just writing my&amp;nbsp;own).&lt;/p&gt;
&lt;p&gt;I had always avoided settling on a system that involved me writing on paper, since my penmanship is wanting in legibility, and I can type several times faster than I can write. However, the more I thought about it, the better idea it seemed to keep some physical planner with me, if only to provide me with a break from staring at screens all day long. Having a dedicated time before going to sleep to reflect on the day&amp;#8217;s events would also prove&amp;nbsp;cathartic.&lt;/p&gt;
&lt;p&gt;Many people online have touted &lt;a href="https://bulletjournal.com"&gt;bullet journaling&lt;/a&gt;. The appeal of this system to me was that it was lightweight and was flexible for different styles of journaling. I thought: since I was never able to stick with any productivity apps in the past, maybe paper journaling was the secret? I went out and purchased a nice notebook and set up all my different journaling spreads, prepared to tackle the new year with my new bullet&amp;nbsp;journal.&lt;/p&gt;
&lt;p&gt;Fast-forward to this February, and I had already started to slip. Part of what I was trying to achieve with my journaling was writing something (even just a sentence) about each day, so I could flip through it at the end of the year to get an overview of how I spent my time. Like I feared, even something as simple as this became too much of a chore, and I would start missing days and struggle to catch up on the&amp;nbsp;week.&lt;/p&gt;
&lt;p&gt;I reflected on this failure to maintain my journal, and realized that the act of journaling itself wasn&amp;#8217;t what motivated me to try it out (I have been managing to stay on top of things through a combination of calendars, flagged emails, and &lt;em&gt;folders-as-to-do-items on my desktop&lt;/em&gt;). What I really wanted was an outlet to write&amp;nbsp;more.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;CGP&lt;/span&gt; Grey and Mike Hurley, two YouTubers &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; podcasters whom I follow, host the podcast &lt;a href="https://www.relay.fm/cortex"&gt;Cortex&lt;/a&gt;, where they talk about their work system and how they stay productive. Something that they have been pushing for for a while now is the idea of &lt;a href="https://www.thethemesystem.com"&gt;yearly themes&lt;/a&gt; as an alternative to yearly resolutions. Grey actually &lt;a href="https://www.youtube.com/watch?v=NVGuFdX5guE"&gt;published a video&lt;/a&gt; earlier this year outlining the case for a theme-based&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;Almost two months into the year, I have decided to retire the bullet journal and jump aboard the yearly themes train, with what I am calling the &lt;em&gt;Year of Communication&lt;/em&gt;. It&amp;#8217;s not that I think my communication skills aren&amp;#8217;t up to snuff, but rather than I don&amp;#8217;t do it &lt;em&gt;enough&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m not sure why, but pretty early on in high school, my brain had made up its mind and decided that sharing thoughts online was something that I should avoid. Irrational, but that&amp;#8217;s how I have existed for the majority of adulthood. Perhaps it was wanting to maintain a cleaner divide between my online persona and my real life, Now, though, I have to accept that having opinions that people might disagree with is okay, and just a side-effect of living in our (increasingly polarized, &lt;em&gt;ugh&lt;/em&gt;)&amp;nbsp;world.&lt;/p&gt;
&lt;p&gt;Another part of my writing paralysis is due to all of the written content that I &lt;em&gt;do&lt;/em&gt; consume. I spend the majority of my waking hours reading articles posted on Hacker News and the more tasteful sides of Reddit. Within these circles, it really feels like every engineer and their dog is able to pump out grandiose yet captivating technical&amp;nbsp;articles.&lt;/p&gt;
&lt;p&gt;Posting more means coming to terms with a few of things: firstly, that not every blog post needs to be a groundbreaking thesis, and that &lt;em&gt;that&amp;#8217;s actually okay&lt;/em&gt;. Random monthly status updates are perfectly fine things to publish on this blog (after all, what else is going to go here?). Also, Twitter and Reddit are not actually read-only services, and lurking gets boring after a while. Finally, I don&amp;#8217;t have to adopt the stiff tone that I usually have when writing. It&amp;#8217;s hard to break from carefully curating one&amp;#8217;s identity, but it&amp;#8217;s what got me into this silent pickle in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;Consider this post my first foray into random posting in the last five years or so. All I can hope for is that this yearly theme sticks a lot better than any&amp;nbsp;resolution.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Going Fast in Advent of Code</title><link href="http://kevinyap.ca/2019/12/going-fast-in-advent-of-code/" rel="alternate"></link><published>2019-12-08T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2019-12-08:/2019/12/going-fast-in-advent-of-code/</id><summary type="html">&lt;p&gt;I have been a big fan of &lt;a href="https://adventofcode.com"&gt;Advent of Code&lt;/a&gt; since it started back in 2015, and have spent every December since diligently solving as many problems as I can right at 9pm. Rather than a chocolate hiding behind each day like …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been a big fan of &lt;a href="https://adventofcode.com"&gt;Advent of Code&lt;/a&gt; since it started back in 2015, and have spent every December since diligently solving as many problems as I can right at 9pm. Rather than a chocolate hiding behind each day like with a regular advent calendar, in Advent of Code, every day brings a two-part holiday-themed puzzle &amp;#8212; the first part introducing the context, and the second part building on the theme of the&amp;nbsp;first.&lt;/p&gt;
&lt;p&gt;I think my favourite part of Advent of Code is that, unlike with &lt;a href="https://en.wikipedia.org/wiki/International_Collegiate_Programming_Contest"&gt;&lt;span class="caps"&gt;ICPC&lt;/span&gt;-style&lt;/a&gt; programming contests, the puzzles are simpler and don&amp;#8217;t require knowledge of esoteric algorithms to solve. This makes it more approachable to a wider variety of people, and can also be done for fun and used as a learning&amp;nbsp;tool.&lt;/p&gt;
&lt;p&gt;There are a lot of developers who work through Advent of Code at a relaxed pace, either to help learn a new programming language or solidify their skills in general, but every year there is a dedicated group of people who compete for &lt;a href="https://adventofcode.com/2019/leaderboard"&gt;global leaderboard points&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first 100 people to collect a &amp;#8220;star&amp;#8221; (ie. solve a part of the puzzle) on each day collect points based on what position they finished in. I have placed somewhere on the global leaderboard every year (peaking at 11th place in 2016), but the competition is only getting tougher. The top competitors often clock in at under 5 minutes for finishing &lt;em&gt;both parts&lt;/em&gt; of the&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;This year, I decided it would be a good idea to also use Advent of Code as an opportunity to help other developers learn as well, so I decided to start &lt;a href="https://www.twitch.tv/Pewqazz"&gt;streaming my attempts&lt;/a&gt; (with a delay to preserve the sanctity of the global leaderboard). Since I can&amp;#8217;t multi-task and narrate my solves when I&amp;#8217;m competing for points, I also decided to write up this blog post to describe my general approach to solving problems, to help other people who are also aiming to land on the&amp;nbsp;leaderboard.&lt;/p&gt;
&lt;h2&gt;Pre-Solve&lt;/h2&gt;
&lt;p&gt;Solving an Advent of Code problem quickly starts before the day&amp;#8217;s puzzle even unlocks. Being well-prepared is key, since getting off on the wrong foot puts you at an instant&amp;nbsp;disadvantage.&lt;/p&gt;
&lt;h3&gt;Language&lt;/h3&gt;
&lt;p&gt;My language of choice is Python, and I imagine a significant portion of the global leaderboard regulars also use Python. While it has characteristics that arguably make it not the optimal choice for production software engineering, there are a number of reasons that I like&amp;nbsp;Python:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Light on syntax&lt;/strong&gt;. Python reads and writes like pseudocode, meaning once I have a rough outline of the correct algorithm in my head, there is less of a barrier to translating it into code than with other, more verbose&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;No typing&lt;/strong&gt;. Types requiring typing (on your keyboard), and keystrokes are valuable when you want to go fast. In addition, taking advantage of &lt;a href="https://en.wikipedia.org/wiki/Duck_typing"&gt;duck typing&lt;/a&gt; often leads to janky but short implementations than something that is formally&amp;nbsp;correct.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Powerful standard library&lt;/strong&gt;. Python has an extremely powerful standard library. If you write Python and don&amp;#8217;t know about &lt;a href="https://docs.python.org/3/library/collections.html"&gt;&lt;code&gt;collections&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://docs.python.org/3/library/itertools.html"&gt;&lt;code&gt;itertools&lt;/code&gt;&lt;/a&gt;, learn them&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;Regardless of what language you choose, you should definitely be familiar with basic control flow structure and common idioms of that language. There&amp;#8217;s one thing that&amp;#8217;s faster than reading through documentation, and that&amp;#8217;s &lt;em&gt;not having to read through documentation&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Editor&lt;/h3&gt;
&lt;p&gt;I use Sublime Text with &amp;#8220;Vintage Mode&amp;#8221; enabled for Vim keybindings. I&amp;#8217;m not proficient enough with Vim to jump around without my mouse 100% of the time, and Sublime&amp;#8217;s multi-cursor / multi-edit keybindings are deeply ingrained in my muscle memory. Really though, the best editor is the one that you are most comfortable with, since fumbling around with an unfamiliar environment is not a great feeling when you&amp;#8217;re aiming for&amp;nbsp;speed.&lt;/p&gt;
&lt;h3&gt;Miscellaneous&lt;/h3&gt;
&lt;p&gt;Instead of starting with a blank file, I use a &lt;a href="https://github.com/iKevinY/advent/blob/master/2019/starter.py"&gt;starter template&lt;/a&gt; that contains useful &lt;code&gt;import&lt;/code&gt;s, as well as some preliminary code to parse the problem input. I&amp;#8217;ve also built up a &lt;a href="https://github.com/iKevinY/advent/blob/master/2019/utils.py"&gt;utility methods file&lt;/a&gt; that contains some useful things, though the majority of the time I forget what I&amp;#8217;ve written in them. Still, it&amp;#8217;s nice to&amp;nbsp;have.&lt;/p&gt;
&lt;p&gt;I also have an alias (&lt;code&gt;aoc&lt;/code&gt;) that is mapped to &lt;code&gt;pbpaste | python file.py&lt;/code&gt;. On macOS, &lt;code&gt;pbpaste&lt;/code&gt; will &lt;code&gt;echo&lt;/code&gt; the current contents of your clipboard. This allows me to quickly swap between running my program on the sample inputs and the true input just by leveraging my clipboard, instead of having to juggle different input files around. (This is probably my favourite&amp;nbsp;tip.)&lt;/p&gt;
&lt;p&gt;Building on this, you should at least have &lt;em&gt;some&lt;/em&gt; alias that runs your program (and compiles it if you&amp;#8217;re working in a compiled language). Minimizing iteration time is key, as when a bug inevitably crops up, you want to be able to quickly make changes and test your new&amp;nbsp;implementation.&lt;/p&gt;
&lt;h2&gt;Solving the&amp;nbsp;Problem&lt;/h2&gt;
&lt;p&gt;With the pre-solve out of the way, we can finally get to solving the actual problem itself. This is a two-step process: 1) read the word problem and turn it into an algorithm, then 2) turn the algorithm into a &lt;em&gt;bug-free program&lt;/em&gt;. This is, of course, easier said than done, so let&amp;#8217;s break it down&amp;nbsp;further.&lt;/p&gt;
&lt;h3&gt;Reading the&amp;nbsp;Problem&lt;/h3&gt;
&lt;p&gt;While it may be natural to read the problem from top to bottom, I find that it is faster to &lt;em&gt;go in reverse&lt;/em&gt;, starting at the bottom of the problem and working&amp;nbsp;backwards.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Scroll to the bottom and open the puzzle input&lt;/strong&gt;. Just by glancing at the puzzle input, you may be able to intuit what type of an implementation you will need to write. Does it look like a bunch of different passwords, one per line, that we will probably need to iterate over and validate? Or maybe they seem like coordinates in 3-D space. Knowing what the input looks like often provides a nice framework for reading through the actual&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Read the goal of the puzzle&lt;/strong&gt;. The final paragraph of the problem text will describe the goal of the puzzle (what you will need to type into the text box). The bolded text will clue you into some keywords or key ideas that will help guide the reading of the rest of the&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Look at the sample test cases&lt;/strong&gt;. The test cases will provide a pretty good idea of how the problem input gets transformed into the desired output. It might even be possible to guess at the algorithm without even reading the rest of the problem&amp;nbsp;text!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parse missing information from the rest of the problem&lt;/strong&gt;. At this point, continue reading upwards, making liberal use of &lt;code&gt;Ctrl+F&lt;/code&gt; to seek out whatever information is necessary to complete your understanding of the&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;With that, it&amp;#8217;s time for the fun&amp;nbsp;part.&lt;/p&gt;
&lt;h3&gt;Write the&amp;nbsp;Code&lt;/h3&gt;
&lt;p&gt;There isn&amp;#8217;t really a sure-fire procedure for &amp;#8220;writing the correct program&amp;#8221;, so I&amp;#8217;ll just provide some tips&amp;nbsp;instead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Know your data structures and algorithms&lt;/strong&gt;. While not &lt;span class="caps"&gt;ICPC&lt;/span&gt;-level, it will be tricky to get through Advent of Code without at least a basic understanding of &lt;span class="caps"&gt;DS&lt;/span&gt;&amp;amp;A. At a bare minimum, being familiar with your language&amp;#8217;s &lt;a href="https://en.wikipedia.org/wiki/Hash_table"&gt;hash table&lt;/a&gt;, and be comfortable with constructing and &lt;a href="https://en.wikipedia.org/wiki/Breadth-first_search"&gt;traversing graphs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Utilize the test cases&lt;/strong&gt;. The test cases are doubly helpful because they provide us with something to test our implementation on later on. Submitting an incorrect result is extremely punishing, and there&amp;#8217;s no worse feeling than having to wait over a minute to submit after implementing a 5-second bug&amp;nbsp;fix.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Debug efficiently&lt;/strong&gt;. Nobody writes bug-free code all the time, and writing bug-free code is even harder when under time pressure. This means that being efficient at debugging your code is all the more important. At a high level, this means getting good at &amp;#8220;guessing&amp;#8221; at what point in your code you may have typo&amp;#8217;d or forgotten something, so that the &amp;#8220;problem spot&amp;#8221; can be identified as quickly as possible. This comes with&amp;nbsp;practice.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you want to see what all of this looks like in action, I created a &lt;a href="https://www.twitch.tv/collections/cspts5QT3RUiTA"&gt;collection of my streamed attempts here&lt;/a&gt;. I&amp;#8217;m also hoping to upload a slower, narrated solve that goes through the concepts discussed in this post (I attempted to do this earlier today, but accidentally just created a 40-minute long silent&amp;nbsp;film).&lt;/p&gt;
&lt;p&gt;Happy Advent of Coding!&amp;nbsp;🎄&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;Edit: (December 2,&amp;nbsp;2022)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s been a few years since I wrote this post, and figured it was due for an update! Both &lt;a href="https://blog.vero.site/post/advent-leaderboard"&gt;betaveros&lt;/a&gt; and &lt;a href="https://gist.github.com/mcpower/87427528b9ba5cac6f0c679370789661"&gt;mcpower&lt;/a&gt;, two people who perform &lt;em&gt;significantly&lt;/em&gt; better on the global leaderboard than I do, have written their own posts with tips and tricks for going quickly; I highly recommend giving them a&amp;nbsp;read.&lt;/p&gt;
&lt;p&gt;Also, for 2022, I&amp;#8217;m &lt;a href="https://www.youtube.com/@iKevinY"&gt;streaming my attempts on YouTube&lt;/a&gt; &amp;#8212; come watch if you&amp;#8217;re&amp;nbsp;interested!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Eval Golf (PlaidCTF Writeup)</title><link href="http://kevinyap.ca/2019/04/eval-golf-plaidctf-writeup/" rel="alternate"></link><published>2019-04-15T00:00:00-07:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2019-04-15:/2019/04/eval-golf-plaidctf-writeup/</id><summary type="html">&lt;p&gt;Sticking with the theme of &lt;span class="caps"&gt;CTF&lt;/span&gt; writeups, here&amp;#8217;s one of a fairly simple challenge from &lt;a href="http://plaidctf.com"&gt;PlaidCTF 2019&lt;/a&gt;. Given that Python is my programming language of choice, it was fun to work on a Python-based challenge (rather than the low-level exploits that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sticking with the theme of &lt;span class="caps"&gt;CTF&lt;/span&gt; writeups, here&amp;#8217;s one of a fairly simple challenge from &lt;a href="http://plaidctf.com"&gt;PlaidCTF 2019&lt;/a&gt;. Given that Python is my programming language of choice, it was fun to work on a Python-based challenge (rather than the low-level exploits that are more common in&amp;nbsp;CTFs).&lt;/p&gt;
&lt;p&gt;The service that we&amp;#8217;re trying to retrieve the flag from executes this&amp;nbsp;script:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;exit&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;secret&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;secret_value_for_password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exec&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;inp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Input value: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;count_digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inp&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;count_digits&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;          &lt;span class="c1"&gt;# Make sure it is a number&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;secret_value_for_password&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Nope. Better luck next time.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Nope. No hacking.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The obvious thing to exploit here is the line containing &lt;code&gt;eval()&lt;/code&gt;, which of course is extremely dangerous to use when paired with user-input. However, there are are a couple of safeguards in place that make our job a little more&amp;nbsp;difficult.&lt;/p&gt;
&lt;p&gt;The easiest thing to do here is just pass in the string &lt;code&gt;secret_value_for_password&lt;/code&gt; as the input value. When that string is &lt;code&gt;eval&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;d, it will set &lt;code&gt;val&lt;/code&gt; to whatever the value of that imported constant is, causing the following &lt;code&gt;if&lt;/code&gt; condition check to succeed and giving us the&amp;nbsp;flag.&lt;/p&gt;
&lt;p&gt;Unfortunately, the code that&amp;#8217;s supposed to &amp;#8220;make sure [the input] is a number&amp;#8221; is not actually doing that. What it&amp;#8217;s actually doing is restricting the length of the input to 10 characters. Interestingly though, since &lt;code&gt;count_digits&lt;/code&gt; is actually set to the length of &lt;code&gt;set(inp)&lt;/code&gt;, the actual restriction is only that our input consists of 10 or fewer &lt;em&gt;distinct characters&lt;/em&gt; (ie. reusing the same character more than once doesn&amp;#8217;t contribute to our&amp;nbsp;&amp;#8220;limit&amp;#8221;).&lt;/p&gt;
&lt;p&gt;The string &lt;code&gt;secret_value_for_password&lt;/code&gt; contains 15 characters, which means it will be rejected. Somehow we need to find a way to &lt;a href="https://en.wikipedia.org/wiki/Code_golf"&gt;golf down&lt;/a&gt; the unique characters in our&amp;nbsp;payload.&lt;/p&gt;
&lt;p&gt;The first that comes to mind is to build up each character of our secret value one-by-one using &lt;a href="https://docs.python.org/3/library/functions.html#chr"&gt;&lt;code&gt;chr()&lt;/code&gt;&lt;/a&gt;, which takes in a number and returns the character corresponding to that &lt;span class="caps"&gt;ASCII&lt;/span&gt; value. Of course, we can represent any number we want by summing &lt;code&gt;1&lt;/code&gt; with itself a bunch of times, which helps us not use up precious unique&amp;nbsp;characters.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secret_value_for_password&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;codepoints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr(&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;codepoints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;secret_value_for_password&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Excellent, we&amp;#8217;ve managed to put together &lt;code&gt;secret_value_for_password&lt;/code&gt; using only seven different characters! The problem here is that this payload will set &lt;code&gt;val&lt;/code&gt; to the string literal &lt;code&gt;secret_value_for_password&lt;/code&gt;, rather than than the value of that variable itself. We could fix this by wrapping the entire payload in &lt;code&gt;eval()&lt;/code&gt;, but since we haven&amp;#8217;t used any of the characters in &lt;code&gt;eval&lt;/code&gt; yet, this would bump us up to 11 characters &amp;#8212; just above our&amp;nbsp;limit.&lt;/p&gt;
&lt;p&gt;Somehow we need to trim one character, but it feels like everything is necessary. We definitely need our parentheses to make any sort of function calls, and the &lt;code&gt;+&lt;/code&gt; serves the dual purpose of accumulating our &lt;span class="caps"&gt;ASCII&lt;/span&gt; values and also performing the string&amp;nbsp;concatenation.&lt;/p&gt;
&lt;p&gt;Rather tantalizingly, the script gives us a variable named &lt;code&gt;val&lt;/code&gt; which is set to &lt;code&gt;0&lt;/code&gt;. If this was instead initialized to &lt;code&gt;1&lt;/code&gt;, we could replace &lt;code&gt;1&lt;/code&gt; in our payload with &lt;code&gt;val&lt;/code&gt;, and be at 10 characters exactly (since we have &lt;code&gt;eval&lt;/code&gt; in our payload&amp;nbsp;anyways).&lt;/p&gt;
&lt;p&gt;The trick here is figuring out a way to represent &lt;code&gt;1&lt;/code&gt; in Python with the following pool of characters: &lt;code&gt;()+chreval&lt;/code&gt;. Having worked with Python enough, I suspected the solution was something to do with truthiness. If we could somehow get an expression to evaluate to something &lt;code&gt;True&lt;/code&gt;, we could sum up &lt;em&gt;that expression&lt;/em&gt; as a replacement for using the character 1 (because in Python, &lt;code&gt;True + True = 2&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The magic bullet here was the built-in &lt;a href="https://docs.python.org/3/library/functions.html#all"&gt;&lt;code&gt;all()&lt;/code&gt;&lt;/a&gt;, which returns &lt;code&gt;True&lt;/code&gt; if all elements of the input iterable are truthy (or if the iterable itself is empty). We already have the characters &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;l&lt;/code&gt; from our call to &lt;code&gt;eval&lt;/code&gt;, and we can simply pass in &lt;code&gt;()&lt;/code&gt; (the empty tuple). That is, &lt;code&gt;all(())&lt;/code&gt; serves as our substitute for the character &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With this change, our payload contains exactly 10 unique characters. Putting this all together, we arrive at our final exploit (using &lt;a href="https://github.com/Gallopsled/pwntools"&gt;&lt;code&gt;pwntools&lt;/code&gt;&lt;/a&gt; to execute&amp;nbsp;it):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pwn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;secret_value_for_password&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;codepoints&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;all(())&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ord&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;chr(&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;codepoints&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eval(&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;canyouguessme.pwni.ng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12349&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;span class="caps"&gt;22KB&lt;/span&gt; payload is accepted by the service and gives us our&amp;nbsp;flag!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Rickety Roulette (picoCTF Writeup)</title><link href="http://kevinyap.ca/2019/03/rickety-roulette-picoctf-writeup/" rel="alternate"></link><published>2019-03-25T00:00:00-07:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2019-03-25:/2019/03/rickety-roulette-picoctf-writeup/</id><summary type="html">&lt;p&gt;Recently, I&amp;#8217;ve taken an interest in &lt;a href="https://en.wikipedia.org/wiki/Capture_the_flag#Computer_security"&gt;CTFs&lt;/a&gt;: computer security competitions with tasks that have been specifically designed to have a specific weakness. The goal is to exploit these weaknesses through various methods &amp;#8212; such as reverse engineering, binary exploitation, or cryptanalysis &amp;#8212; in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I&amp;#8217;ve taken an interest in &lt;a href="https://en.wikipedia.org/wiki/Capture_the_flag#Computer_security"&gt;CTFs&lt;/a&gt;: computer security competitions with tasks that have been specifically designed to have a specific weakness. The goal is to exploit these weaknesses through various methods &amp;#8212; such as reverse engineering, binary exploitation, or cryptanalysis &amp;#8212; in order to recover a &amp;#8220;flag&amp;#8221;: a password that follows a specific format, like &lt;code&gt;flag{s3cret_c0de}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;My university started a &lt;a href="https://ubcctf.github.io"&gt;&lt;span class="caps"&gt;CTF&lt;/span&gt; club&lt;/a&gt; last month, and since I&amp;#8217;m quite new to this field, I&amp;#8217;ve been working my way through &lt;a href="https://picoctf.com"&gt;picoCTF&lt;/a&gt;, which is an oft-recommended beginner resource. Since I haven&amp;#8217;t written any technical articles in a while, I thought it would be interesting to provide write-ups for some of the more interesting problems, starting with one called &lt;code&gt;roulette&lt;/code&gt;. (The source code as provided by picoCTF can be found &lt;a href="http://kevinyap.ca/files/roulette.c"&gt;here&lt;/a&gt;, in case you&amp;#8217;d like to try the challenge yourself&amp;nbsp;first.)&lt;/p&gt;
&lt;p&gt;If we connect to the service, we see the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Welcome to ONLINE ROULETTE!
Here, have $3249 to start on the house! You&amp;#39;ll lose it all anyways &amp;gt;:)

How much will you wager?
Current Balance: $3249    Current Wins: 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you enter an amount greater than your current balance, the program will reject your wager. Choosing a valid amount allows you to guess which number will come&amp;nbsp;up:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&amp;gt; 5000
You can&amp;#39;t bet more than you have!
How much will you wager?
Current Balance: $3249   Current Wins: 0
&amp;gt; 100
Choose a number (1-36)
&amp;gt; 1

Spinning the Roulette for a chance to win $200!

Roulette  :  2

WRONG
You&amp;#39;re never gonna win
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On the off chance that you manage to guess the correct value, the program will fairly reward you with twice your wagered amount. We&amp;#8217;ve been told that the goal is to accrue $1 billion, and upon doing so, we&amp;#8217;ll be rewarded with the flag. With only a 1-in-36 chance of doubling our money, it&amp;#8217;s simply not possible to get anywhere close by pure chance. Therefore, we&amp;#8217;ll have to find a way to beat the&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s analyze the program piece-by-piece to see if we can identify any weaknesses (the code snippets I&amp;#8217;ve included in this post are slightly reformatted from the original source provided above, for space efficiency). For starters, here&amp;#8217;s the &lt;code&gt;main&lt;/code&gt; function:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#define HOTSTREAK 3&lt;/span&gt;
&lt;span class="cp"&gt;#define MAX_WINS 16&lt;/span&gt;
&lt;span class="cp"&gt;#define ONE_BILLION 1000000000&lt;/span&gt;

&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;cash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_rand&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_bet&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_choice&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;play_roulette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MAX_WINS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Wow you won %lu times? Looks like its time for you cash you out.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wins&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ONE_BILLION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;*** Current Balance: $%lu ***&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cash&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HOTSTREAK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Wow, I can&amp;#39;t believe you did it.. You deserve this flag!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;print_flag&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Wait a second... You&amp;#39;re not even on a hotstreak! Get out of here cheater!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Haha, lost all the money I gave you already? See ya later!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The program gives us a random amount of money to start with, and as long as we still have money, allows us to keep play roulette. Of note is the call to &lt;code&gt;print_flag()&lt;/code&gt; &amp;#8212; getting the program to execute this function will give us our&amp;nbsp;flag.&lt;/p&gt;
&lt;p&gt;If we have more than $1 billion dollars, we enter the part of the program that checks whether the flag should be printed or not. However, take note of the &lt;code&gt;wins &amp;gt;= HOTSTREAK&lt;/code&gt; check; if the current number of wins is less than 3, the system detects that we somehow tampered with our cash balance &lt;em&gt;without&lt;/em&gt; going through the hassle of actually winning multiple rounds in a row, accuses us of cheating, and kicks us&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;Let&amp;#8217;s take a look at &lt;code&gt;get_bet()&lt;/code&gt; and see if there&amp;#8217;s anything we can exploit&amp;nbsp;there.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_bet&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;How much will you wager?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;get_long&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;You can&amp;#39;t bet more than you have!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This looks pretty standard: continuously ask the player for their wager until they provide a valid bet, and then return that amount. One common bug in programs like this is the possibility of &lt;a href="https://en.wikipedia.org/wiki/Integer_overflow"&gt;integer overflow&lt;/a&gt;, so let&amp;#8217;s investigate &lt;code&gt;get_long()&lt;/code&gt; for&amp;nbsp;bugs.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;is_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_long&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;gt; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;uint64_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;is_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getchar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_digit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LONG_MAX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LONG_MAX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getchar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;getchar&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;get_long()&lt;/code&gt; iterates over the given input character-by-character, ignoring anything that isn&amp;#8217;t a digit, and gradually accumulates the value in &lt;code&gt;l&lt;/code&gt;. If it ever exceeds the value of &lt;code&gt;LONG_MAX&lt;/code&gt; (a constant provided by &lt;code&gt;limits.h&lt;/code&gt;), the balance is set to &lt;code&gt;LONG_MAX&lt;/code&gt;, presumably as an attempt to guard against interflow overflow&amp;nbsp;bugs.&lt;/p&gt;
&lt;p&gt;However, it turns out this function is still exploitable. Since a &lt;code&gt;long&lt;/code&gt; is a signed value, exceeding &lt;code&gt;LONG_MAX&lt;/code&gt; will cause the value to &amp;#8220;wrap around&amp;#8221; to a negative number. We find that the program is compiled for 32-bit CPUs, so we simply need a value greater than 2³¹ − 1 =&amp;nbsp;2147483647:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;How much will you wager?
Current Balance: $4962   Current Wins: 0
&amp;gt; 2500000000
Choose a number (1-36)
&amp;gt; 1

Spinning the Roulette for a chance to win $705032704!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great, we&amp;#8217;ve found a way to effectively win as much money as we want, which means it&amp;#8217;s trivial to achieve a balance of $1 billion. However, there&amp;#8217;s still the issue of having to win at least 3 times &lt;em&gt;before&lt;/em&gt; reaching that amount (otherwise the cheat-detection will kick&amp;nbsp;in).&lt;/p&gt;
&lt;p&gt;Of course, one approach we can take is to simply bet $0 over and over until we get lucky on the 1/36 dice roll three times, then trigger the overflow on our balance. However, the roulette program plays a &amp;#8220;fun&amp;#8221; animation when spinning the wheel that takes around 10 seconds, and the time we&amp;#8217;re allowed to stay connected to the service is limited to a few minutes, so it&amp;#8217;s still astronomically unlikely that we&amp;#8217;d be able to win enough times before being kicked out. We&amp;#8217;ll have to find a way to beat the&amp;nbsp;odds.&lt;/p&gt;
&lt;p&gt;Recall that we get a random amount of money every time we connect to the roulette service. Let&amp;#8217;s take a closer look at the implementation of &lt;code&gt;get_rand()&lt;/code&gt;, the function that dictates our starting&amp;nbsp;balance:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;get_rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/dev/urandom&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;srand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It reads in some bytes from &lt;a href="https://en.wikipedia.org/wiki//dev/random"&gt;&lt;code&gt;/dev/urandom&lt;/code&gt;&lt;/a&gt;, truncates the result to the interval &lt;code&gt;[0, 5000)&lt;/code&gt;, and returns that as our starting&amp;nbsp;balance.&lt;/p&gt;
&lt;p&gt;The bug here lies in one somewhat innocuous-looking call: &lt;code&gt;srand(seed)&lt;/code&gt;. This seeds the random number generation for the program, which by itself isn&amp;#8217;t a huge deal. However, remember that the value of &lt;code&gt;seed&lt;/code&gt; becomes our starting balance &amp;#8212; the program reveals the seed to&amp;nbsp;us!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;play_roulette()&lt;/code&gt; uses &lt;code&gt;rand()&lt;/code&gt; to choose which number the wheel lands on, and since we know the seed, the sequence of spins is actually deterministic! Let&amp;#8217;s write up a quick program to generate what values we should guess by taking the seed (our initial balance) as a command line argument, and then emulating the roulette logic to print the next few&amp;nbsp;results:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define ROULETTE_SIZE 36&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;srand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%i&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ROULETTE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, if we use this program to choose our guesses, we find that we get the first one right, but after that it fails. Did we misunderstand the behaviour of the roulette program and just get lucky? Let&amp;#8217;s take a closer look at the &lt;code&gt;play_roulette&lt;/code&gt; function to see if we can figure out what went&amp;nbsp;wrong:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;play_roulette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Spinning the Roulette for a chance to win $%lu!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;spin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ROULETTE_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;spin_roulette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spin&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cash&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bet&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;wins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win_msgs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NUM_WIN_MSGS&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lose_msgs1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NUM_LOSE_MSGS&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lose_msgs2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;NUM_LOSE_MSGS&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It turns out that the program calls &lt;code&gt;rand()&lt;/code&gt; to pick random winning/losing messages to display to the player, and this advances the &lt;span class="caps"&gt;PRNG&lt;/span&gt;. Therefore, we should account for this by choosing every &lt;em&gt;other&lt;/em&gt; number produced by the program we wrote (assuming we always hit the winning branch; we would have to skip two &lt;span class="caps"&gt;RNG&lt;/span&gt; results if we ever&amp;nbsp;lose).&lt;/p&gt;
&lt;p&gt;With this new insight, let&amp;#8217;s beat roulette for&amp;nbsp;good:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ nc 2018shell.picoctf.com 26662
Welcome to ONLINE ROULETTE!
Here, have $3249 to start on the house! You&amp;#39;ll lose it all anyways &amp;gt;:)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We pass the seed to the program we wrote to figure out which numbers to bet&amp;nbsp;on.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;./rand&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3249&lt;/span&gt;
&lt;span class="m"&gt;9&lt;/span&gt;
&lt;span class="m"&gt;29&lt;/span&gt;
&lt;span class="m"&gt;6&lt;/span&gt;
&lt;span class="m"&gt;29&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This tells us that the roulette will land on 9, 6, then 1, so let&amp;#8217;s guess&amp;nbsp;those!&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;How much will you wager?
Current Balance: $3249   Current Wins: 0
&amp;gt; 0
Choose a number (1-36)
&amp;gt; 9

Spinning the Roulette for a chance to win $0!

Roulette  :  9

Wow.. Nice One!

How much will you wager?
Current Balance: $3249   Current Wins: 1
&amp;gt; 0
Choose a number (1-36)
&amp;gt; 6

Spinning the Roulette for a chance to win $0!

Roulette  :  6

Alright, now you&amp;#39;re cooking!

How much will you wager?
Current Balance: $3249   Current Wins: 2
&amp;gt; 0
Choose a number (1-36)
&amp;gt; 1

Spinning the Roulette for a chance to win $0!

Roulette  :  1

You&amp;#39;re not cheating are you?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that we&amp;#8217;ve won three times, we just need to underflow our balance like we did earlier on (we guess a losing number so that our bet doesn&amp;#8217;t get re-added upon&amp;nbsp;winning):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;How much will you wager?
Current Balance: $3249   Current Wins: 3
&amp;gt; 2500000000
Choose a number (1-36)
&amp;gt; 1

Spinning the Roulette for a chance to win $705032704!

Roulette  :  12

WRONG
Just give up!

*** Current Balance: $1794970545 ***
Wow, I can&amp;#39;t believe you did it.. You deserve this flag!
picoCTF{redacted}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Success! This was an interesting problem because all it took to find the vulnerabilities was a careful pass through the source code. In addition, both the bugs are things that could easily sneak their way into an actual codebase if not careful. For my next writeup, I&amp;#8217;m planning on tackling a problem that requires more sophisticated tooling and background&amp;nbsp;knowledge.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Breaking the Enigma Code With Rust</title><link href="http://kevinyap.ca/2017/04/breaking-the-enigma-code-with-rust/" rel="alternate"></link><published>2017-04-17T00:00:00-07:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2017-04-17:/2017/04/breaking-the-enigma-code-with-rust/</id><summary type="html">&lt;p&gt;If I had to pick something from the humanities to study in university, I would probably go with history. Not only is history interesting in and of itself, but having a good grasp on history clarifies a lot of modern geopolitics. War …&lt;/p&gt;</summary><content type="html">&lt;p&gt;If I had to pick something from the humanities to study in university, I would probably go with history. Not only is history interesting in and of itself, but having a good grasp on history clarifies a lot of modern geopolitics. War is probably one of the more &amp;#8220;exciting&amp;#8221; aspects of history, and while it goes without saying that war is terrible, a lot of technologies and even new fields of research are the product of wartime&amp;nbsp;conditions.&lt;/p&gt;
&lt;p&gt;The Enigma machines are a series of electromechanical cipher machines that were famously used by Germany in World War &lt;span class="caps"&gt;II&lt;/span&gt; to encrypt military communications. Breaking the Enigma code had a huge impact on the Allies&amp;#8217; ability to win the war. Most of what I could write about the history of cracking Enigma is already covered by &lt;a href="https://en.wikipedia.org/wiki/Cryptanalysis_of_the_Enigma"&gt;this Wikipedia article&lt;/a&gt; (or if you prefer a more dramatized version, a &lt;a href="https://en.wikipedia.org/wiki/The_Imitation_Game"&gt;certain movie&lt;/a&gt; starring Benedict Cumberbatch), so I won&amp;#8217;t go over it in&amp;nbsp;detail.&lt;/p&gt;
&lt;p&gt;Inspired by the &lt;a href="https://en.wikipedia.org/wiki/Colossus_computer"&gt;computers&lt;/a&gt; that were born out of cryptanalysis, I decided to write my own Enigma-cracking program in Rust &amp;#8212; &lt;a href="https://github.com/iKevinY/ultra"&gt; &lt;code&gt;ultra&lt;/code&gt;&lt;/a&gt;. &amp;#8220;Ultra secret&amp;#8221; was the classification level used by the Allies to refer to intelligence obtained via deciphering German communications at &lt;a href="https://en.wikipedia.org/wiki/Bletchley_Park"&gt;Bletchley Park&lt;/a&gt;. If the Germany had discovered that the Allies could read their messages, they easily could have switched to a completely new encryption method, nullifying all the effort spent breaking Enigma in the first&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;To demonstrate how the Enigma cipher was employed, here is some example usage from &lt;code&gt;ultra&lt;/code&gt;. First, we encrypt this plaintext message using some random machine&amp;nbsp;settings:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ultra&lt;span class="w"&gt; &lt;/span&gt;--randomize&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;A few miles south of Soledad, the Salinas River drops in close to the hillside bank and runs deep and green. The water is warm too, for it has slipped twinkling over the yellow sands in the sunlight before reaching the narrow pool.&amp;quot;&lt;/span&gt;
S&lt;span class="w"&gt; &lt;/span&gt;rkz&lt;span class="w"&gt; &lt;/span&gt;yypvn&lt;span class="w"&gt; &lt;/span&gt;dsory&lt;span class="w"&gt; &lt;/span&gt;vc&lt;span class="w"&gt; &lt;/span&gt;Xbjvauu,&lt;span class="w"&gt; &lt;/span&gt;yos&lt;span class="w"&gt; &lt;/span&gt;Tlkdcmx&lt;span class="w"&gt; &lt;/span&gt;Qpwcd&lt;span class="w"&gt; &lt;/span&gt;tpgsf&lt;span class="w"&gt; &lt;/span&gt;zj&lt;span class="w"&gt; &lt;/span&gt;euqpp&lt;span class="w"&gt; &lt;/span&gt;op&lt;span class="w"&gt; &lt;/span&gt;vvd&lt;span class="w"&gt; &lt;/span&gt;iwuffxjz&lt;span class="w"&gt; &lt;/span&gt;umes&lt;span class="w"&gt; &lt;/span&gt;nmk&lt;span class="w"&gt; &lt;/span&gt;yamh&lt;span class="w"&gt; &lt;/span&gt;zkdq&lt;span class="w"&gt; &lt;/span&gt;vwk&lt;span class="w"&gt; &lt;/span&gt;vavwc.&lt;span class="w"&gt; &lt;/span&gt;Nkh&lt;span class="w"&gt; &lt;/span&gt;fmyzp&lt;span class="w"&gt; &lt;/span&gt;gk&lt;span class="w"&gt; &lt;/span&gt;rfhe&lt;span class="w"&gt; &lt;/span&gt;sgx,&lt;span class="w"&gt; &lt;/span&gt;qth&lt;span class="w"&gt; &lt;/span&gt;ml&lt;span class="w"&gt; &lt;/span&gt;psm&lt;span class="w"&gt; &lt;/span&gt;qasmrkl&lt;span class="w"&gt; &lt;/span&gt;npmhsxdou&lt;span class="w"&gt; &lt;/span&gt;jqwx&lt;span class="w"&gt; &lt;/span&gt;hba&lt;span class="w"&gt; &lt;/span&gt;eiyeur&lt;span class="w"&gt; &lt;/span&gt;qtoci&lt;span class="w"&gt; &lt;/span&gt;kq&lt;span class="w"&gt; &lt;/span&gt;lqb&lt;span class="w"&gt; &lt;/span&gt;hxqczkqn&lt;span class="w"&gt; &lt;/span&gt;mdodir&lt;span class="w"&gt; &lt;/span&gt;scdmsprt&lt;span class="w"&gt; &lt;/span&gt;ddm&lt;span class="w"&gt; &lt;/span&gt;ywnbgz&lt;span class="w"&gt; &lt;/span&gt;uemo.
&lt;span class="o"&gt;(&lt;/span&gt;Rotors:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;215&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;Setting:&lt;span class="w"&gt; &lt;/span&gt;YFI,&lt;span class="w"&gt; &lt;/span&gt;Ring&lt;span class="w"&gt; &lt;/span&gt;Setting:&lt;span class="w"&gt; &lt;/span&gt;UZW&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When this ciphertext is encrypted using the same settings, we recover the original&amp;nbsp;message:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ultra&lt;span class="w"&gt; &lt;/span&gt;--rotor&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;215&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;--key&lt;span class="o"&gt;=&lt;/span&gt;YFI&lt;span class="w"&gt; &lt;/span&gt;--ring&lt;span class="o"&gt;=&lt;/span&gt;UZW&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;S rkz yypvn dsory vc Xbjvauu, yos Tlkdcmx Qpwcd tpgsf zj euqpp op vvd iwuffxjz umes nmk yamh zkdq vwk vavwc. Nkh fmyzp gk rfhe sgx, qth ml psm qasmrkl npmhsxdou jqwx hba eiyeur qtoci kq lqb hxqczkqn mdodir scdmsprt ddm ywnbgz uemo.&amp;quot;&lt;/span&gt;
A&lt;span class="w"&gt; &lt;/span&gt;few&lt;span class="w"&gt; &lt;/span&gt;miles&lt;span class="w"&gt; &lt;/span&gt;south&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;Soledad,&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;Salinas&lt;span class="w"&gt; &lt;/span&gt;River&lt;span class="w"&gt; &lt;/span&gt;drops&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;close&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;hillside&lt;span class="w"&gt; &lt;/span&gt;bank&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;runs&lt;span class="w"&gt; &lt;/span&gt;deep&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;green.&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;water&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;warm&lt;span class="w"&gt; &lt;/span&gt;too,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;slipped&lt;span class="w"&gt; &lt;/span&gt;twinkling&lt;span class="w"&gt; &lt;/span&gt;over&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;yellow&lt;span class="w"&gt; &lt;/span&gt;sands&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;sunlight&lt;span class="w"&gt; &lt;/span&gt;before&lt;span class="w"&gt; &lt;/span&gt;reaching&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;narrow&lt;span class="w"&gt; &lt;/span&gt;pool.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, let&amp;#8217;s attempt to decipher the message with no knowledge of the correct&amp;nbsp;settings:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;ultra&lt;span class="w"&gt; &lt;/span&gt;--decrypt&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;\&lt;/span&gt;
&lt;span class="s2"&gt;S rkz yypvn dsory vc Xbjvauu, yos Tlkdcmx Qpwcd tpgsf zj euqpp op vvd iwuffxjz umes nmk yamh zkdq vwk vavwc. Nkh fmyzp gk rfhe sgx, qth ml psm qasmrkl npmhsxdou jqwx hba eiyeur qtoci kq lqb hxqczkqn mdodir scdmsprt ddm ywnbgz uemo.&amp;quot;&lt;/span&gt;
A&lt;span class="w"&gt; &lt;/span&gt;few&lt;span class="w"&gt; &lt;/span&gt;miles&lt;span class="w"&gt; &lt;/span&gt;south&lt;span class="w"&gt; &lt;/span&gt;of&lt;span class="w"&gt; &lt;/span&gt;Soledad,&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;Salinas&lt;span class="w"&gt; &lt;/span&gt;River&lt;span class="w"&gt; &lt;/span&gt;drops&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;close&lt;span class="w"&gt; &lt;/span&gt;to&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;hillside&lt;span class="w"&gt; &lt;/span&gt;bank&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;runs&lt;span class="w"&gt; &lt;/span&gt;deep&lt;span class="w"&gt; &lt;/span&gt;and&lt;span class="w"&gt; &lt;/span&gt;green.&lt;span class="w"&gt; &lt;/span&gt;The&lt;span class="w"&gt; &lt;/span&gt;water&lt;span class="w"&gt; &lt;/span&gt;is&lt;span class="w"&gt; &lt;/span&gt;warm&lt;span class="w"&gt; &lt;/span&gt;too,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;it&lt;span class="w"&gt; &lt;/span&gt;has&lt;span class="w"&gt; &lt;/span&gt;slipped&lt;span class="w"&gt; &lt;/span&gt;twinkling&lt;span class="w"&gt; &lt;/span&gt;over&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;yellow&lt;span class="w"&gt; &lt;/span&gt;sands&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;sunlight&lt;span class="w"&gt; &lt;/span&gt;before&lt;span class="w"&gt; &lt;/span&gt;reaching&lt;span class="w"&gt; &lt;/span&gt;the&lt;span class="w"&gt; &lt;/span&gt;narrow&lt;span class="w"&gt; &lt;/span&gt;pool.
&lt;span class="o"&gt;(&lt;/span&gt;Rotors:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;215&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;Key&lt;span class="w"&gt; &lt;/span&gt;Setting:&lt;span class="w"&gt; &lt;/span&gt;EZI,&lt;span class="w"&gt; &lt;/span&gt;Ring&lt;span class="w"&gt; &lt;/span&gt;Setting:&lt;span class="w"&gt; &lt;/span&gt;ATW&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We managed to recover the plaintext from nothing but the ciphertext! The decryption algorithm used in &lt;code&gt;ultra&lt;/code&gt; was largely inspired by some of James Lyon&amp;#8217;s articles on the Enigma machine on his website &lt;a href="http://practicalcryptography.com/ciphers/mechanical-era/enigma/"&gt;Practical Cryptography&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It is important to make a distinction between the algorithm used by &lt;code&gt;ultra&lt;/code&gt; and the cryptanalysis that was performed at Bletchley Park. The methods that were actually used to crack Enigma during World War &lt;span class="caps"&gt;II&lt;/span&gt; involved intercepting messages where parts of the plaintext could be guessed, which mostly came in the form of weather reports and other routine&amp;nbsp;communications.&lt;/p&gt;
&lt;p&gt;On the other hand, the way that &lt;code&gt;ultra&lt;/code&gt; deciphers messages is purely statistical. &lt;a href="https://github.com/iKevinY/ultra/blob/master/src/data/quadgrams.txt"&gt;This file&lt;/a&gt; contains a list of quadgrams (four-letter sequences) from a fairly sizeable English corpus, and their number of occurrences. According to this, the top 5 most common English quadgrams are &lt;em&gt;&lt;span class="caps"&gt;TION&lt;/span&gt;&lt;/em&gt;, &lt;em&gt;&lt;span class="caps"&gt;NTHE&lt;/span&gt;&lt;/em&gt;, &lt;em&gt;&lt;span class="caps"&gt;THER&lt;/span&gt;&lt;/em&gt;, &lt;em&gt;&lt;span class="caps"&gt;THAT&lt;/span&gt;&lt;/em&gt;, and &lt;em&gt;&lt;span class="caps"&gt;OFTH&lt;/span&gt;&lt;/em&gt;, which seems reasonable. At the bottom of the file, we find extremely uncommon quadgrams, such as &lt;em&gt;&lt;span class="caps"&gt;AAJZ&lt;/span&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If we take a given piece of ciphertext and attempt to decrypt it with random Enigma settings, it will almost certainly look like gibberish. However, we know at least one configuration will produce something that seems like reasonable English: the one used to encrypt the message in the first place! Therefore, all we have to do is iterate through all possible machine settings, decrypt the ciphertext, compute a &amp;#8220;fitness score&amp;#8221; based on how similar it looks to English, and choose the setting that resulted in the best&amp;nbsp;score.&lt;/p&gt;
&lt;p&gt;To come up with a fitness score, we use a statistical &lt;a href="https://en.wikipedia.org/wiki/Language_model"&gt;language model&lt;/a&gt;, and define the probability of any given phrase as the product of its component quadgrams (ignoring things like word boundaries). For example, the probability of the message &amp;#8220;&lt;span class="caps"&gt;APPLE&lt;/span&gt;&amp;#8221; would be calculated by taking the product of the probabilities of &lt;em&gt;&lt;span class="caps"&gt;APPL&lt;/span&gt;&lt;/em&gt; and &lt;em&gt;&lt;span class="caps"&gt;PPLE&lt;/span&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;$$\Pr(\text{&lt;span class="caps"&gt;APPLE&lt;/span&gt;}) = \Pr(\text{&lt;span class="caps"&gt;APPL&lt;/span&gt;}) \times \Pr(\text{&lt;span class="caps"&gt;PPLE&lt;/span&gt;})$$&lt;/p&gt;
&lt;p&gt;The probability of a single quadgram is given by $\Pr(q) = \frac{C(q)}{N}$, where $C(q)$ is the count of a given quadgram, and $N$ is the sum of all quadgram counts in our list. Because computers have finite floating-point precision, it is ill-advised to multiply several tiny floats together. Luckily, we can use logarithms to map these multiplications to additions, and because $\log(x) &amp;gt; \log(y)$ for all $x &amp;gt; y ≥ 0$, it is fine to use this log probability as our fitness&amp;nbsp;function.&lt;/p&gt;
&lt;p&gt;$$\log(\Pr(\text{&lt;span class="caps"&gt;APPLE&lt;/span&gt;})) = \log(\frac{C(\text{&lt;span class="caps"&gt;APPL&lt;/span&gt;})}{N}) + \log(\frac{C(\text{&lt;span class="caps"&gt;PPLE&lt;/span&gt;})}{N})$$&lt;/p&gt;
&lt;p&gt;Using the identity $\log(\frac{a}{b}) = \log(a) - \log(b)$, this can be simplified even&amp;nbsp;further:&lt;/p&gt;
&lt;p&gt;$$\log(\Pr(\text{&lt;span class="caps"&gt;APPLE&lt;/span&gt;})) = \log(C(\text{&lt;span class="caps"&gt;APPL&lt;/span&gt;})) + \log(C(\text{&lt;span class="caps"&gt;PPLE&lt;/span&gt;})) -&amp;nbsp;2\log(N)$$&lt;/p&gt;
&lt;p&gt;The final $\log(N)$ term will have a coefficient of the number of quadgrams in the input message. Because encrypting a message doesn&amp;#8217;t change its length, this term would only cause a constant difference in the fitness function, and can therefore be completely omitted. This leaves us with a simple fitness function: the sum of the log-counts of all quadgrams in the&amp;nbsp;message.&lt;/p&gt;
&lt;p&gt;Typical usage of the M3 Enigma machine involved choosing 3 of 5 possible rotors. Because the order of the rotors matters, this comes out to 60 possible permutations. Each rotor has 26 different &amp;#8220;key settings&amp;#8221; (sometimes referred to as &amp;#8220;indicator settings&amp;#8221;) and 26 different &amp;#8220;ring settings&amp;#8221;, leaving us with $60 \times 26^6$, or $18\,534\,946\,560$ possible rotor&amp;nbsp;configurations.&lt;/p&gt;
&lt;p&gt;When you take into account the &lt;a href="https://en.wikipedia.org/wiki/Enigma_machine#Plugboard"&gt;plugboard&lt;/a&gt;, the number of settings is &lt;a href="http://crypto.stackexchange.com/questions/33628/how-many-possible-enigma-machine-settings"&gt;in the quintillions&lt;/a&gt;, so we won&amp;#8217;t even consider trying to break this using our ciphertext-only attack. However, this still leaves approximately 18 billion permutations. Even if it only took 1 microsecond to try each one, it would still take 5 hours to work through the entire problem space. Fortunately, with some clever optimization, we can reduce the number of permutations to just over 1.5&amp;nbsp;million.&lt;/p&gt;
&lt;p&gt;We can search for the optimal rotors and key settings separately from their ring settings. The ring settings determine offsets for the rotors&amp;#8217; notches (the position at which the fast rotor advancing causes the middle rotor to advance, and likewise between the middle and the slow rotors). If we find the correct rotors and key settings with the wrong ring settings, the resulting plaintext will be somewhat correct, with errors where the rotors advanced in the wrong&amp;nbsp;place.&lt;/p&gt;
&lt;p&gt;First, we check all possible rotor and key permutations, fixing the ring settings as &amp;#8220;&lt;span class="caps"&gt;AAA&lt;/span&gt;&amp;#8221;. We pick the best of those, and then try key and ring settings for the fast and middle rotors; the slow rotor doesn&amp;#8217;t &amp;#8220;turn&amp;#8221; any other rotors, so its ring setting doesn&amp;#8217;t influence the decryption, and therefore we can safely ignore it. This leaves us with a total of $60 \times 26^3 + 26^4$, or $1\,511\,536$ settings to check &amp;#8212; a reasonable number to brute-force on a modern&amp;nbsp;computer.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Seeing as &lt;code&gt;ultra&lt;/code&gt; was my first real Rust project, I figured I would also share some thoughts I have about it. Perhaps Rust&amp;#8217;s primary selling point is memory safety. My introductory computer systems course was essentially one extended lecture about everything that can go wrong with &lt;code&gt;malloc&lt;/code&gt; and pointers. While being familiar with using Valgrind is neat, it&amp;#8217;s nice to not have to think about these things at all, and just focus on writing the&amp;nbsp;implementation.&lt;/p&gt;
&lt;p&gt;In addition, between closures and iterators, Rust makes it easy to write functional code. Because of my prior experience with Python, Haskell, and &lt;a href="https://racket-lang.org"&gt;Racket&lt;/a&gt;, I felt right at home using Rust. Chaining together iterator adapters and collecting the result rather than iteratively pushing values into a vector with a for-loop reminded me of using list comprehensions in&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;The bulk of &lt;code&gt;ultra&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s decryption algorithm involves iterating over Enigma settings, running the ciphertext through it, and returning the one with the highest fitness score. This lends itself nicely to parallelization; by splitting up the work, each worker can compute the maximum of its subset of the work, and the final result is the max of &lt;em&gt;those&lt;/em&gt;&amp;nbsp;maximums.&lt;/p&gt;
&lt;p&gt;Using the amazing &lt;a href="https://github.com/nikomatsakis/rayon"&gt;Rayon&lt;/a&gt; data parallelism library, many Rust iterators can be parallelized nearly effortlessly. With &lt;code&gt;ultra&lt;/code&gt;, I essentially just needed to import Rayon&amp;#8217;s prelude and add a couple of calls to &lt;code&gt;into_par_iter()&lt;/code&gt;. (I also had to collect into a vector because the result of &lt;code&gt;iproduct!&lt;/code&gt; can&amp;#8217;t be directly transformed into a parallel&amp;nbsp;iterator.)&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;rust&lt;/span&gt;
&lt;span class="nt"&gt;use&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;rayon&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;prelude&lt;/span&gt;&lt;span class="o"&gt;::*;&lt;/span&gt;

&lt;span class="nt"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;rotor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;iproduct&lt;/span&gt;&lt;span class="o"&gt;!(&lt;/span&gt;&lt;span class="nt"&gt;rotors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;collect&lt;/span&gt;&lt;span class="o"&gt;::&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;Vec&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;_&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;()&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;These&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;two&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;lines&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;turn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;normal&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;into_par_iter&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;into&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;parallel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;one&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;max_by_key&lt;/span&gt;&lt;span class="o"&gt;(|&amp;amp;(&lt;/span&gt;&lt;span class="nt"&gt;rotor&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;...&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;unwrap&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What makes this feel magical is that I didn&amp;#8217;t even have to think about managing multi-threaded memory access; the parallelization just works, and all I had to do was add three lines of code. Languages with a rich library ecosystem tend to flourish, and the existence of cool libraries like Rayon gives me a lot of confidence in the future of&amp;nbsp;Rust.&lt;/p&gt;
&lt;p&gt;Since Rust advertises itself as being &amp;#8220;blazingly fast&amp;#8221;, I decided to do some benchmarking by comparing James&amp;#8217; &lt;a href="http://practicalcryptography.com/cryptanalysis/breaking-machine-ciphers/cryptanalysis-enigma/#c-code-for-breaking-enigma"&gt;sample C code&lt;/a&gt; to sequential and parallel versions of &lt;code&gt;ultra&lt;/code&gt;. These are the times that I got while testing on my quad-core MacBook&amp;nbsp;Pro:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left;"&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;strong&gt;real (s)&lt;/strong&gt;&lt;/th&gt;
&lt;th style="text-align: center;"&gt;&lt;strong&gt;user (s)&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;C (reference)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;43.8&lt;/td&gt;
&lt;td style="text-align: center;"&gt;43.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Rust (sequential)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;19.2&lt;/td&gt;
&lt;td style="text-align: center;"&gt;19.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left;"&gt;Rust (parallel)&lt;/td&gt;
&lt;td style="text-align: center;"&gt;4.5&lt;/td&gt;
&lt;td style="text-align: center;"&gt;28.4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The sequential version of &lt;code&gt;ultra&lt;/code&gt; already runs about twice as fast as the C version, and after adding the parallelization described above, it jumps to nearly 10 times as&amp;nbsp;fast!&lt;/p&gt;
&lt;p&gt;When writing &lt;code&gt;ultra&lt;/code&gt;, I didn&amp;#8217;t explicitly set out to implement a hyper-optimized version of James&amp;#8217; code. Instead, I used the description of the algorithm described in his blog post and wrote what I felt was idiomatic Rust. I think this nicely demonstrates the fact that Rust makes it easy to write programs that are readable and also&amp;nbsp;performant.&lt;/p&gt;
&lt;p&gt;Cargo also plays a large role in making Rust nice work with. Nothing is more annoying than coming across an open source project that seems useful, but struggling to figure out how to even compile it. With a Rust project, however, you&amp;#8217;re essentially guaranteed that &lt;code&gt;cargo build&lt;/code&gt; will work &amp;#8212; no Makefiles or manual dependency management&amp;nbsp;required.&lt;/p&gt;
&lt;p&gt;I really enjoyed learning about Rust while building &lt;a href="https://github.com/iKevinY/ultra"&gt;&lt;code&gt;ultra&lt;/code&gt;&lt;/a&gt;, and will definitely be using it more in the future. Given the results of Stack Overflow&amp;#8217;s recent &lt;a href="https://stackoverflow.com/insights/survey/2017"&gt;developer survey&lt;/a&gt;, it seems like Rust is growing in popularity &amp;#8212; it will be very exciting if it becomes adopted by&amp;nbsp;industry.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>The Joy of Problem Solving</title><link href="http://kevinyap.ca/2016/12/the-joy-of-problem-solving/" rel="alternate"></link><published>2016-12-30T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2016-12-30:/2016/12/the-joy-of-problem-solving/</id><summary type="html">&lt;p&gt;This past semester, I took one of my favourite computer science courses to date &amp;#8212; &lt;em&gt;Intermediate Algorithm Design and Analysis&lt;/em&gt;. The course helped me realize my passion for reasoning about interesting problems, and being able to convey ideas about these problems to others …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This past semester, I took one of my favourite computer science courses to date &amp;#8212; &lt;em&gt;Intermediate Algorithm Design and Analysis&lt;/em&gt;. The course helped me realize my passion for reasoning about interesting problems, and being able to convey ideas about these problems to others. After all, the human mind has evolved to be shockingly good at identifying patterns, and solving puzzles is one of many ways to scratch that itch. This is what I personally find so appealing about programming: a problem that may initially seem straightforward can almost always be approached from many different&amp;nbsp;angles.&lt;/p&gt;
&lt;p&gt;One of the best ways to improve one&amp;#8217;s problem solving skills is being exposed to a lot of different problems and approaches to these problems. The web is a goldmine for this type of content, and I really enjoy reading long-form articles that go in-depth into a given topic. I have a lot of respect for anyone who can take a complex idea and distill it into something that is both approachable and engaging; this skill that I would like to perfect. After all, in the grand scheme of things, knowledge that cannot be shared is virtually&amp;nbsp;worthless.&lt;/p&gt;
&lt;p&gt;After I moved my blog to Pelican, I wrote a few posts of this sort of explanatory nature, but haven&amp;#8217;t done so over the past couple of years. I think the problem is that whenever I set out to get some writing done, I imagined the final product as some sort of grandiose thinkpiece. This is clearly a flawed approach, as I didn&amp;#8217;t end up publishing any posts this year (apart from this one). Throughout high school, my ability to produce coherent essays at the last minute was something I prided myself upon. Now that I&amp;#8217;m studying computer science, proofs of correctness are the most writing I ever have to do, so I&amp;#8217;d really like to return to writing informative blog&amp;nbsp;posts.&lt;/p&gt;
&lt;p&gt;Fortunately, the New Year is &lt;em&gt;that time&lt;/em&gt; where people arbitrarily decide to make drastic changes to their lives. I&amp;#8217;ve learned my lesson from last year, and this time around, I think I&amp;#8217;ll make some more general resolutions. I&amp;#8217;ll be trying out a few ideas from Alex Vermeer&amp;#8217;s page on &lt;a href="https://alexvermeer.com/life-hacking/"&gt;life hacking&lt;/a&gt;. I want my Twitter feed to be more of a stream of consciousness rather than meticulously curated timeline. I want to write a bunch of blog posts that other people (might) find useful. Let&amp;#8217;s see what comes of&amp;nbsp;2017.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Reflections and Resolutions</title><link href="http://kevinyap.ca/2015/12/reflections-and-resolutions/" rel="alternate"></link><published>2015-12-31T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2015-12-31:/2015/12/reflections-and-resolutions/</id><summary type="html">&lt;p&gt;It&amp;#8217;s already the last day of 2015, and I&amp;#8217;ve only published a single post this year (and on the first of January, no less). It turns out I&amp;#8217;m not actually limited to posting technical articles here, so I figured …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s already the last day of 2015, and I&amp;#8217;ve only published a single post this year (and on the first of January, no less). It turns out I&amp;#8217;m not actually limited to posting technical articles here, so I figured I would ramble on about various things from this year and set some goals for 2016. With any luck, this might even become a regular&amp;nbsp;occurrence!&lt;/p&gt;
&lt;p&gt;The computer science courses that I took this term were based around C and C++ rather than Java, and so thankfully I was able to forgo using an &lt;span class="caps"&gt;IDE&lt;/span&gt; for development. As a result, this also meant that I could ditch my Chromebook and pack even lighter. I decided to try using an iPad as my computing device because iOS 9 made multitasking a viable option, and it worked quite well. I was able to &lt;span class="caps"&gt;SSH&lt;/span&gt; into the department machines to write and compile code, which gave me the perfect excuse to learn Vim to some degree of&amp;nbsp;competency.&lt;/p&gt;
&lt;p&gt;I also spent the my most recent academic term applying for jobs through the &lt;a href="https://en.wikipedia.org/wiki/Cooperative_education"&gt;co-op program&lt;/a&gt; at my university, and I&amp;#8217;m excited about spending the next few months interning as a software engineer &amp;#8212; quite the change in scenery from the perpetual lecture hall. If there&amp;#8217;s one piece of advice I have for others applying for their first internships, it&amp;#8217;s to &lt;em&gt;work on personal projects&lt;/em&gt;. Not only do projects demonstrate your technical ability, but they also provide talking points for the more behavioural aspects of interviews. The important part isn&amp;#8217;t so much that they&amp;#8217;ve gone viral or are hundreds of thousands of lines of code long, but that you are able to discuss decisions you made and things you learned during the&amp;nbsp;process.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;New Year&amp;#8217;s resolutions are great because they&amp;#8217;re arbitrary, and people inevitably forget about them. Sticking with your resolutions is generally good, though, so I&amp;#8217;m hoping that by writing them in virtual stone, I&amp;#8217;ll be pressured to follow through with at least some of&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;Writing is something that doesn&amp;#8217;t get exercised very much as a computer science major. This is a shame, as communication skills are arguably more important now than ever. As a result, I write significantly less than I did in high school, which has led to what I perceive to be a decline in my articulacy. I have also noticed that I&amp;#8217;m a &amp;#8220;chronic lurker&amp;#8221; when it comes to discussion-based sites like Twitter and Reddit, resulting in writing something, then promptly deleting it. Obviously, there is value to this when practiced in moderation, but I feel as though I self-censor a little too much. My personal theory is that there&amp;#8217;s some level of &lt;a href="https://en.wikipedia.org/wiki/Perfectionism_(psychology)"&gt;perfectionism&lt;/a&gt; to blame for this behaviour, and I&amp;#8217;d like to correct it sooner rather than&amp;nbsp;later.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Time is the best censor, and patience a most excellent teacher.&amp;#8221; &lt;cite&gt;Frédéric Chopin&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Fortunately, the remedy to this seems straightforward; I simply need to write more, and I have two fantastic venues for doing so: this website and Twitter. I&amp;#8217;ll be making a concerted effort to do more writing this year, and &amp;#8212; as Chopin says &amp;#8212; let time do the&amp;nbsp;censoring.&lt;/p&gt;
&lt;p&gt;Another observation I&amp;#8217;ve made is that extended, gapless music has become increasingly key to my bursts of productivity. When I&amp;#8217;m not listening to podcasts, I tend to throw on an hour-long mashup or medley, since it allows me to better concentrate. I haven&amp;#8217;t composed anything for years now, so this is yet another thing I&amp;#8217;d like to focus on. The one quantifiable goal I have for 2016 is to release at least 30 minutes of music, which I&amp;#8217;ll hopefully be able to transform into some sort of continuous&amp;nbsp;mix.&lt;/p&gt;
&lt;p&gt;One of the most rewarding aspects of the software industry is the emphasis placed on continual learning; there&amp;#8217;s always a new language or technology cropping up. At times, this goes from interesting to overwhelming, but for the most part, it&amp;#8217;s possible to filter out the extraneous. Apple&amp;#8217;s open sourcing of Swift earlier this month was monumental for the &lt;span class="caps"&gt;OSS&lt;/span&gt; world, and contributing to Rust was a valuable learning experience for me as well. This year, I&amp;#8217;d like to actually develop projects using these two&amp;nbsp;languages.&lt;/p&gt;
&lt;p&gt;As it turns out, natural languages are pretty important as well for communicating with fellow Earth-dwellers. As far as language acquisition goes, the younger the better, so the best time to learn a new language is now, not later. I&amp;#8217;ve always been fascinated by Japanese due to the combination of logographic (kanji) and syllabic (kana) characters used in its writing system. It&amp;#8217;s been a long time since I&amp;#8217;ve learned a new language so I&amp;#8217;m not sure how much progress I will make, but my final resolution for the new year is to begin learning&amp;nbsp;Japanese.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s to a great 2016,&amp;nbsp;everyone!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>On Git and GitHub Flow</title><link href="http://kevinyap.ca/2015/01/on-git-and-github-flow/" rel="alternate"></link><published>2015-01-01T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2015-01-01:/2015/01/on-git-and-github-flow/</id><summary type="html">&lt;p&gt;Recently, I have been making an added effort to seek out and contribute to open source projects on GitHub. The motivation behind this was largely the &lt;a href="http://24pullrequests.com"&gt;24 Pull Requests&lt;/a&gt; project, which encourages developers to submit one pull request for each day in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, I have been making an added effort to seek out and contribute to open source projects on GitHub. The motivation behind this was largely the &lt;a href="http://24pullrequests.com"&gt;24 Pull Requests&lt;/a&gt; project, which encourages developers to submit one pull request for each day in December leading up to Christmas. The prospect of being a new contributor to a large, open source project can be daunting, especially to the novice programmer, so this little bit of extrinsic motivation was a nudge in the right&amp;nbsp;direction.&lt;/p&gt;
&lt;p&gt;In learning how to properly make use of Git and GitHub, I&amp;#8217;ve referenced a multitude of different resources. With 2015 having just arrived, I&amp;#8217;m sure many people have &amp;#8220;contribute to more open source projects&amp;#8221; on their list of New Year&amp;#8217;s resolutions as well, so hopefully this article serves as a useful starting&amp;nbsp;point.&lt;/p&gt;
&lt;h2&gt;Finding a&amp;nbsp;Project&lt;/h2&gt;
&lt;p&gt;Choosing a project is left as an exercise to the reader. However, here are my&amp;nbsp;suggestions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Look to see if any software you use on a regular basis is open source. Given your familiarity with the software, you will likely be able to identify (and hack on) some bugs or additional&amp;nbsp;features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check out &lt;a href="https://github.com/trending"&gt;trending GitHub repositories&lt;/a&gt; for languages that you&amp;#8217;re familiar with or ones that you&amp;#8217;re interested in learning, and pick one that seems friendly towards new contributors (most projects on GitHub are) and well-maintained. This technique is useful as you&amp;#8217;ll be browsing across projects that your fellow open source developers have also deemed&amp;nbsp;interesting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember that even if you can&amp;#8217;t contribute directly to the codebase due to lack of experience or being overwhelmed by the scale of the project, open source projects appreciate all sorts of contributions. While not as &amp;#8220;prestigious&amp;#8221;, documentation and unit tests are areas that inevitability need to be addressed, and are a good way to become familiar with the&amp;nbsp;project.&lt;/p&gt;
&lt;h2&gt;Getting&amp;nbsp;Started&lt;/h2&gt;
&lt;p&gt;The first step to using Git is installing it. You can do that from Git&amp;#8217;s &lt;a href="http://git-scm.com/downloads"&gt;download page&lt;/a&gt;, or through a package manager like Homebrew. My suggestion is to learn Git from the command line, and to avoid using other Git clients; the command line is universal, so being familiar with it to start with will be beneficial in the long&amp;nbsp;run.&lt;/p&gt;
&lt;p&gt;That being said, I do have &lt;a href="https://mac.github.com"&gt;GitHub for Mac&lt;/a&gt; installed and I use it fairly frequently for selectively choosing specific parts of a file to commit, which is fairly cumbersome to do from the command line. Also, I find looking through the changes that have been made is much easier with the GitHub application compared to using &lt;code&gt;git diff&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Git tracks content modifications. It does so primarily through the use of commits. Commits can be thought of as snapshots in the development process, and contain authorship and timestamp information among other pieces of metadata. By committing frequently, it becomes trivial to rollback to an old commit if something goes disastrously (or if your simply don&amp;#8217;t like the changes you made). Because of this, Git (and any other version control system) is extremely powerful, even for projects that aren&amp;#8217;t collaborative in&amp;nbsp;nature.&lt;/p&gt;
&lt;p&gt;There is a convention behind the formatting of commit messages that should be followed, given the collaborative nature of open source projects. The first (or only) line of the commit is a summary of the changes, 50 characters at most, in the imperative tense (as in &lt;em&gt;add&lt;/em&gt;, not &lt;em&gt;added&lt;/em&gt;). If you want to expand further, you should leave a blank line and on the third line, begin an extended description wrapped to 72&amp;nbsp;characters.&lt;/p&gt;
&lt;p&gt;Unfortunately, after prolonged periods of time, the quality of commit messages tends to degrade (&lt;a href="http://xkcd.com/1296/"&gt;relevant &lt;span class="caps"&gt;XKCD&lt;/span&gt;&lt;/a&gt;). Don&amp;#8217;t worry about this, though, as you can avoid forcing others to look at your horribly crafted commit messages through a process known as &lt;em&gt;rebasing&lt;/em&gt;, discussed later in this&amp;nbsp;article.&lt;/p&gt;
&lt;h2&gt;Branches and Pull&amp;nbsp;Requests&lt;/h2&gt;
&lt;p&gt;One concept that is central to Git and GitHub flow is branching. Branches are pointers to commits. When working on feature additions or fixes in a project, it is advisable to &lt;em&gt;always&lt;/em&gt; work in a separate branch, and either merge or rebase &amp;#8212; discussed later in much more detail &amp;#8212; into the master branch upon&amp;nbsp;competition.&lt;/p&gt;
&lt;p&gt;When you open a pull request on GitHub, the branch that you chose is noted. Pushing additional commits to that specific branch will result in them appearing in the pull request. This is one of the strongest cases for using a new branch for every feature or bug fix &amp;#8212; it makes it trivial to open a pull request for that specific change, without incorporating any unrelated&amp;nbsp;changes.&lt;/p&gt;
&lt;h2&gt;To Merge or Not to&amp;nbsp;Merge&lt;/h2&gt;
&lt;p&gt;Merging is the process of merging the commits made in two branches into one branch. This is done when a branch that is being worked on is deemed complete, and the changes are to be merged into the master branch. In the simplest case (where the only commits that have been made are in the topic branch), this is known as a fast-forward merge, and the commits are &amp;#8220;played on top of&amp;#8221; the master branch. Fast-forward merges can be performed automatically by Git and require no additional effort on the part of the user performing the merge. In other cases, merging either results in a merge commit or the manual resolution of merge conflicts (if the changes made in the branches contradict one&amp;nbsp;another).&lt;/p&gt;
&lt;p&gt;Something that Git tutorials tend to gloss over is the rebase command. The reason for this is that rebasing involves &lt;em&gt;rewriting history&lt;/em&gt;. When you rebase a set of commits, they will change, and if the older set of commits have already been pushed to a remote repository that others have pulled from, pushing new changes will cause a break in continuity for others who try to pull these newly pushed commits. Because of this, it is recommended to only rebase local commits in most&amp;nbsp;cases.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rebase&lt;span class="w"&gt; &lt;/span&gt;-i&lt;span class="w"&gt; &lt;/span&gt;HEAD~n&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# rebase the last n commits&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;-i&lt;/code&gt; flag stands for &lt;em&gt;interactive&lt;/em&gt;. Upon executing the command, your &lt;code&gt;$EDITOR&lt;/code&gt; of choice will open with a list of commits from least recent to most recent preceded by the word&amp;nbsp;&amp;#8220;pick&amp;#8221;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#!text
pick a5b977a Ensure all expected resource files exist
pick f08e801 Add problems 311–320
pick 969f9e5 Update tests to ensure resource correspondence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Below the list of commits are some instructions about rebasing, including the available commands. To actually rebase, you make changes to the text in the editor and then close it. Here are the operations that you can&amp;nbsp;perform:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Delete the line, which will remove the commit&amp;nbsp;entirely.&lt;/li&gt;
&lt;li&gt;Change &amp;#8220;pick&amp;#8221; to a different command, causing the rebase to execute that command&amp;nbsp;instead.&lt;/li&gt;
&lt;li&gt;Rearrange the lines, which will rearrange the order of the&amp;nbsp;commits.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typically, a project maintainer might ask for you to squash your pull request. What this actually involves doing is rebasing and using the &amp;#8220;squash&amp;#8221; command to turn multiple commits into just one or a couple logical commits. For example, if you wanted to turn the three commits listed above into one larger commit, you would edit the file to look like the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#!text
pick a5b977a Ensure all expected resource files exist
squash f08e801 Add problems 311–320
squash 969f9e5 Update tests to ensure resource correspondence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Upon closing the editor, a new editor will open up that allows you to edit the commit message of the newly created single commit. The commit messages of each of the commits being squashed are included for the sake of convenience, and when the editor is closed, the non-commented lines become the new commit&amp;nbsp;message.&lt;/p&gt;
&lt;p&gt;I mentioned before that rebasing should only be done with local changes that have not been pushed to a remote repository, but in a pull request, by definition, the commits have already been pushed to your fork of the main repository. In this case, it is fine to rebase and push, since it can be assumed that people have not been actively making changes on the feature/fix branch that your pull request is based on. However, Git will not let you push the rebased commits using &lt;code&gt;git push&lt;/code&gt; out of safety; you have to use &lt;code&gt;git push -f&lt;/code&gt; to &lt;em&gt;force&lt;/em&gt; the push to&amp;nbsp;happen.&lt;/p&gt;
&lt;h2&gt;Putting It All&amp;nbsp;Together&lt;/h2&gt;
&lt;p&gt;After forking the project on GitHub, the typical GitHub workflow might look something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!sh&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;clone&lt;span class="w"&gt; &lt;/span&gt;https://github.com/YOUR_GITHUB_USERNAME/PROJECT_NAME.git
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;PROJECT_NAME
git&lt;span class="w"&gt; &lt;/span&gt;branch&lt;span class="w"&gt; &lt;/span&gt;my-feature
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;my-feature
nano&lt;span class="w"&gt; &lt;/span&gt;README.md
rm&lt;span class="w"&gt; &lt;/span&gt;silly-file.txt
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-A
git&lt;span class="w"&gt; &lt;/span&gt;commit
git&lt;span class="w"&gt; &lt;/span&gt;push&lt;span class="w"&gt; &lt;/span&gt;-u&lt;span class="w"&gt; &lt;/span&gt;origin&lt;span class="w"&gt; &lt;/span&gt;my-feature
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;Clone your fork to your local development&amp;nbsp;machine.&lt;/li&gt;
&lt;li&gt;Change the current directory to the project&amp;nbsp;folder.&lt;/li&gt;
&lt;li&gt;Create a branch called &lt;code&gt;my-feature&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Switch to the newly created &lt;code&gt;my-feature&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;Make changes to &lt;code&gt;README.md&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Remove &lt;code&gt;silly-file.txt&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Stage all (&lt;code&gt;-A&lt;/code&gt;) changes made, including file creations and deletions. You can specify certain files rather than using the &lt;code&gt;-A&lt;/code&gt; flag to selectively stage&amp;nbsp;changes.&lt;/li&gt;
&lt;li&gt;Commit the changes that have been staged. Continue to commit new changes and rebase when&amp;nbsp;needed.&lt;/li&gt;
&lt;li&gt;Push the &lt;code&gt;my-feature&lt;/code&gt; branch to remote repository aliased as &lt;code&gt;origin&lt;/code&gt; (your fork), using the &lt;code&gt;-u&lt;/code&gt; flag to add the branch as a remote tracking branch. (Subsequent pushes will only requre a &lt;code&gt;git push&lt;/code&gt; with no additional parameters.) Then, open a pull request using GitHub&amp;#8217;s web&amp;nbsp;interface!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For other Git-related problems that one may run into, Google can usually provide the answer. Be sure to look at &lt;a href="https://help.github.com"&gt;GitHub&amp;#8217;s help page&lt;/a&gt; and the &lt;a href="http://git-scm.com/doc"&gt;Git documentation&lt;/a&gt; itself. Here&amp;#8217;s to lots of open source contributions in&amp;nbsp;2015!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>EulerPy — Streamlining Project Euler</title><link href="http://kevinyap.ca/2014/06/eulerpy-streamlining-project-euler/" rel="alternate"></link><published>2014-06-27T00:00:00-07:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2014-06-27:/2014/06/eulerpy-streamlining-project-euler/</id><summary type="html">&lt;p&gt;As someone relatively new to the world of programming, I&amp;#8217;m always looking for resources that will help me become more experienced. I had read the name &lt;a href="http://projecteuler.net"&gt;Project Euler&lt;/a&gt; countless times, but had attempted to work through the problems before, and ultimately …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As someone relatively new to the world of programming, I&amp;#8217;m always looking for resources that will help me become more experienced. I had read the name &lt;a href="http://projecteuler.net"&gt;Project Euler&lt;/a&gt; countless times, but had attempted to work through the problems before, and ultimately became annoyed at the process of solving the problems. I had to switch between writing code in Sublime Text, debugging the output in Terminal, and finally, comparing my solution to the accepted solution found somewhere on the Internet. Because of this, I put Project Euler on the&amp;nbsp;backburner.&lt;/p&gt;
&lt;p&gt;When learning about the world of programming, I was fascinated by the fact that you could install  packages or formulae with a simple &lt;code&gt;pip install&lt;/code&gt; or &lt;code&gt;brew install&lt;/code&gt; command from the terminal and instantly be able to run it, and was determined to write my own package (if only for the novelty of being able to &lt;code&gt;pip install&lt;/code&gt; something that I had&amp;nbsp;written).&lt;/p&gt;
&lt;p&gt;It wasn&amp;#8217;t until a few weeks ago that the thought of going through the Project Euler problems revisited my mind, and of course, it was during the point of time when Project Euler was down. Remembering my prior experience with Project Euler, I set out to write a tool that would streamline the process of solving problems &amp;#8212; &lt;a href="https://github.com/iKevinY/EulerPy"&gt;EulerPy&lt;/a&gt;. Essentially, it helps with two aspects of Project Euler: it creates a file containing a docstring with the problem as its body (for reference), and it verifies whether a problem has been solved&amp;nbsp;correctly.&lt;/p&gt;
&lt;p&gt;I started out with an idea where the script would parse the problem&amp;#8217;s page on Project Euler using a library like Beautiful Soup in order to determine the problem body. I had a working prototype and was testing it on problems, and all seemed to be well until I got to &lt;a href="http://projecteuler.net/problem=4"&gt;problem #4&lt;/a&gt;, where the times symbol is displayed as an image rather than a character. I then did some searching and found a feature on Project Euler where a minimal version of the problem text could be accessed through a &lt;code&gt;/minimal=n&lt;/code&gt; page where &lt;code&gt;n&lt;/code&gt; is the problem number. However, I think that this functionality was linked to the Project Euler account system, and since it was only brought back as a static site, it is not accessible anymore. While I could have improved the logic of the script to automatically translate images to their text-based equivalents, I realize that this wasn&amp;#8217;t the best solution at all, since it would require Internet access to fetch new&amp;nbsp;problems.&lt;/p&gt;
&lt;p&gt;After some more searching, I came across Kyle Keen&amp;#8217;s &lt;a href="http://kmkeen.com/local-euler/"&gt;Local Euler&lt;/a&gt; project, which contains a text-only version of problems 1 through 202, which was plenty to get started with, so I rewrote the script to read from a modified version of this text file. There&amp;#8217;s probably a much better way to store the problems that I&amp;#8217;m simply not aware of, but I figured a text file is fairly good considering it can easily&amp;nbsp;maintained.&lt;/p&gt;
&lt;p&gt;Making use of Armin Ronacher&amp;#8217;s &lt;a href="https://github.com/mitsuhiko/click"&gt;click&lt;/a&gt; library to parse command line arguments, I put together EulerPy. I tried to make it as easy as possible to solve Project Euler problems. With this goal in mind, I wrote the package so that it would check the output of a &lt;code&gt;.py&lt;/code&gt; file containing the attempted solution to the problem. Because of this, some of the problems can be solved with simple &lt;code&gt;print&lt;/code&gt; one-liners, allowing the ability to quickly run &lt;code&gt;euler&lt;/code&gt; to move on to the next&amp;nbsp;problem.&lt;/p&gt;
&lt;p&gt;Also convenient is the fact that the &lt;code&gt;euler&lt;/code&gt; command itself will automatically print the output of the Project Euler file to the terminal. Because of this, debugging is made (ever so slightly) easier by the fact that you don&amp;#8217;t need to switch between two different commands when testing the output of the problem file and verifying if it outputs the correct&amp;nbsp;solution.&lt;/p&gt;
&lt;p&gt;Having just been introduced to Travis &lt;span class="caps"&gt;CI&lt;/span&gt; after setting it up to &lt;a href="http://kevinyap.ca/2014/06/deploying-pelican-sites-using-travis-ci/"&gt;automatically deploy&lt;/a&gt; the latest version of my website, I figured it would be interesting to set it up for EulerPy as well. I ended up writting a couple of simple tests to ensure anyone updating &lt;code&gt;problems.txt&lt;/code&gt; had not transcribed the problems in an errant&amp;nbsp;fashion.&lt;/p&gt;
&lt;p&gt;Hopefully there aren&amp;#8217;t too many &lt;em&gt;faux pas&lt;/em&gt; in my coding, as EulerPy is one of my first Python&amp;nbsp;projects.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Deploying Pelican Sites Using Travis CI</title><link href="http://kevinyap.ca/2014/06/deploying-pelican-sites-using-travis-ci/" rel="alternate"></link><published>2014-06-11T00:00:00-07:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2014-06-11:/2014/06/deploying-pelican-sites-using-travis-ci/</id><summary type="html">&lt;p&gt;After learning about Travis &lt;span class="caps"&gt;CI&lt;/span&gt; through browsing open-source projects on GitHub, I became interested in seeing if it was possible to incorporate it into my already existing workflow &lt;a href="http://kevinyap.ca/2013/12/hosting-with-github-pages/"&gt;based on GitHub Pages&lt;/a&gt;. Even though Pelican is a static site generator, adding Travis …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After learning about Travis &lt;span class="caps"&gt;CI&lt;/span&gt; through browsing open-source projects on GitHub, I became interested in seeing if it was possible to incorporate it into my already existing workflow &lt;a href="http://kevinyap.ca/2013/12/hosting-with-github-pages/"&gt;based on GitHub Pages&lt;/a&gt;. Even though Pelican is a static site generator, adding Travis &lt;span class="caps"&gt;CI&lt;/span&gt; into the mix would allow changes to the theme or content to be made from anywhere that can push to a Git repository &amp;#8212; even directly from the GitHub website &amp;#8212; and the newly generated files would be pushed to the live server in a fairly timely manner, almost like a WordPress site. Thankfully, quite a few other people had already combined Pelican and Travis &lt;span class="caps"&gt;CI&lt;/span&gt;, so setting it up was fairly&amp;nbsp;straightforward.&lt;/p&gt;
&lt;p&gt;Most of the solutions that I found suggested using the &lt;a href="https://github.com/davisp/ghp-import"&gt;&lt;code&gt;ghp-import&lt;/code&gt;&lt;/a&gt; package to handle pushing to the GitHub repository. I was not satisfied with this solution as I wanted to keep intact the incremental changes being tracked by the repository itself (one of the upsides of using GitHub Pages as a host, in my opinion). I came across &lt;a href="http://zonca.github.io/2013/09/automatically-build-pelican-and-publish-to-github-pages.html"&gt;Andrea Zonca&amp;#8217;s post&lt;/a&gt;, which described a setup using &lt;code&gt;rsync&lt;/code&gt; and &lt;code&gt;git clone&lt;/code&gt; to update the branch. Since his blog post is written in a very detailed manner, I won&amp;#8217;t rewrite it here verbatim. In&amp;nbsp;short:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add &lt;code&gt;.travis.yml&lt;/code&gt; (which describes to Travis how to build your project) and &lt;code&gt;requirements.txt&lt;/code&gt; (which lists the packages to be installed via pip) to the source file branch of your site&amp;#8217;s&amp;nbsp;repository.&lt;/li&gt;
&lt;li&gt;Create an OAuth token from your &lt;a href="https://github.com/settings/applications"&gt;GitHub applications page&lt;/a&gt; which gets used by Travis to push changes to the GitHub Pages branch of your&amp;nbsp;repository.&lt;/li&gt;
&lt;li&gt;Install the &lt;code&gt;travis&lt;/code&gt; gem and encrypt the OAuth token using the &lt;code&gt;travis encrypt&lt;/code&gt; command.&lt;/li&gt;
&lt;li&gt;Enable Travis &lt;span class="caps"&gt;CI&lt;/span&gt; for the repository and push&amp;nbsp;changes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The &lt;code&gt;travis.yml&lt;/code&gt; file works in stages. The &lt;code&gt;install&lt;/code&gt; stage issues a &lt;code&gt;pip install&lt;/code&gt; command which references &lt;code&gt;requirements.txt&lt;/code&gt; for the list of packages to install. After that comes the &lt;code&gt;script&lt;/code&gt; stage, which serves as the actual build phase for the project. Most projects would run tests here, but in this case, it executes the &lt;code&gt;pelican&lt;/code&gt; command in order to generate the static site files. Following the build, &lt;code&gt;after_success&lt;/code&gt; can be given commands to run which are executed after the build itself, and this is when new site files are pushed to the GitHub&amp;nbsp;repository.&lt;/p&gt;
&lt;p&gt;One of the issues that I ran into in the process of setting this up was installing the &lt;code&gt;travis&lt;/code&gt; gem, which is needed to encrypt the OAuth token that allows Travis to push to the GitHub repository. What ended up solving the problem in the end was updating the version of Ruby on my&amp;nbsp;computer.&lt;/p&gt;
&lt;p&gt;Since I liked some of the features that I had previously included in my site generation Bash script, I rewrote Andrea&amp;#8217;s &lt;code&gt;deploy.sh&lt;/code&gt; script to work similarly to my existing workflow. The entirety of the file can be found &lt;a href="https://github.com/iKevinY/iKevinY.github.io/blob/src/generate.sh"&gt;in the GitHub repository&lt;/a&gt; of my website&amp;#8217;s source. My rewritten script grabs the hash and message of the most recent commit to the source&amp;nbsp;branch:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!bash&lt;/span&gt;
&lt;span class="nv"&gt;commitHash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rev-parse&lt;span class="w"&gt; &lt;/span&gt;HEAD&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;commitMessage&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;log&lt;span class="w"&gt; &lt;/span&gt;-1&lt;span class="w"&gt; &lt;/span&gt;--pretty&lt;span class="o"&gt;=&lt;/span&gt;%B&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These variables are used during the &lt;code&gt;git commit&lt;/code&gt; command to create a descriptive commit message. The commit message in the source branch is used as the first line of the commit message, and the commit hash and Travis build number are included as the extended part of the commit&amp;nbsp;message:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!bash&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$commitMessage&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Generated by commit &lt;/span&gt;&lt;span class="nv"&gt;$commitHash&lt;/span&gt;&lt;span class="s2"&gt;; pushed by Travis build &lt;/span&gt;&lt;span class="nv"&gt;$TRAVIS_BUILD_NUMBER&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are a few minor changes I made to the &lt;code&gt;rsync&lt;/code&gt; and &lt;code&gt;git&lt;/code&gt; commands of Andrea&amp;#8217;s script as well. Within the &lt;code&gt;rsync&lt;/code&gt; command, I removed the asterisk from the source directory and added the &lt;code&gt;--delete&lt;/code&gt; flag to instruct the script to delete files in the destination directory that are not present in the source directory. Simply adding the &lt;code&gt;--delete&lt;/code&gt; flag to the version of the command present in Andrea&amp;#8217;s script will not affect the command as a result of the to the wildcard search caused by the&amp;nbsp;asterisk:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!bash&lt;/span&gt;
rsync&lt;span class="w"&gt; &lt;/span&gt;-r&lt;span class="w"&gt; &lt;/span&gt;--exclude&lt;span class="o"&gt;=&lt;/span&gt;.git&lt;span class="w"&gt; &lt;/span&gt;--delete&lt;span class="w"&gt; &lt;/span&gt;../&lt;span class="nv"&gt;$PELICAN_OUTPUT_FOLDER&lt;/span&gt;/&lt;span class="w"&gt; &lt;/span&gt;./
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also changed the flag on &lt;code&gt;git add&lt;/code&gt; to &lt;code&gt;-A&lt;/code&gt; in order to stage deleted files as well as added and modified ones and added the &lt;code&gt;git status -s&lt;/code&gt; command which echos a nice overview of what changes were actually staged (which gets stored in Travis&amp;#8217; build&amp;nbsp;logs):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;status&lt;span class="w"&gt; &lt;/span&gt;-s
A&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2014&lt;/span&gt;/06/deploying-pelican-sites-using-travis-ci/index.html
A&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2014&lt;/span&gt;/06/index.html
M&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="m"&gt;2014&lt;/span&gt;/index.html
M&lt;span class="w"&gt;  &lt;/span&gt;archive/index.html
M&lt;span class="w"&gt;  &lt;/span&gt;index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since my version of &lt;code&gt;deploy.sh&lt;/code&gt; was based on the script that I used to test and deploy changes locally, I wrote it so that it could be executed from a local development machine by checking against the &lt;code&gt;$TRAVIS&lt;/code&gt; variable. When run locally, it can be used to check what changes would be pushed to the GitHub Pages branch given the modifications that have been made locally. In practice, it wouldn&amp;#8217;t ever be useful to push changes manually since Travis would automatically repeat the exact same steps, but if the integration between GitHub and Travis were to ever stop working, I would still have a way to make modifications to the GitHub Pages&amp;nbsp;branch.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>On Programming and Turtles</title><link href="http://kevinyap.ca/2014/01/on-programming-and-turtles/" rel="alternate"></link><published>2014-01-05T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2014-01-05:/2014/01/on-programming-and-turtles/</id><summary type="html">&lt;p&gt;Minecraft is one of my favourite games. &lt;a href="https://minecraft.net/stats"&gt;Over 13 million&lt;/a&gt; copies have been sold for the &lt;span class="caps"&gt;PC&lt;/span&gt; alone &amp;#8212; an impressive statistic considering the game was in alpha merely three years ago. Minecraft&amp;#8217;s popularity is due primarily to its open-ended nature. The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Minecraft is one of my favourite games. &lt;a href="https://minecraft.net/stats"&gt;Over 13 million&lt;/a&gt; copies have been sold for the &lt;span class="caps"&gt;PC&lt;/span&gt; alone &amp;#8212; an impressive statistic considering the game was in alpha merely three years ago. Minecraft&amp;#8217;s popularity is due primarily to its open-ended nature. The ever-growing variety of blocks appeals to those who enjoy the building aspect of the game, and survival mode only augments the gratification of building by having the player work for their building materials. As for PvP combat, there are numerous community-created custom maps with their own unique rulesets. Expanding on this, through the use of elaborate server-side modding, Minecraft functions more as a game engine than a standalone game, enabling players with unmodded clients to instantly connect to a server and play game modes such as a Minecraft version of the Hunger Games. There is a niche in the game for every type of&amp;nbsp;player.&lt;/p&gt;
&lt;p&gt;Added in Minecraft Alpha 1.0.1, Redstone opened up an entirely new world in terms of gameplay. &lt;a href="http://minecraft.gamepedia.com/Redstone#Redstone_Dust"&gt;Redstone Dust&lt;/a&gt; carries a Redstone current between various Redstone components while &lt;a href="http://minecraft.gamepedia.com/Redstone_Torch"&gt;Redstone Torches&lt;/a&gt; function as a &lt;a href="http://en.wikipedia.org/wiki/Inverter_(logic_gate)"&gt;signal inverter&lt;/a&gt;. In conjunction with one another, it is possible to construct elementary logic gates, and therefore, fully functional &lt;a href="http://en.wikipedia.org/wiki/Arithmetic_logic_unit"&gt;ALUs&lt;/a&gt; and other more complex circuits. This means that Minecraft is Turing-complete, but I&amp;nbsp;digress.&lt;/p&gt;
&lt;p&gt;The concept of Redstone captivated me even though I had no experience with anything involving logic gates prior to playing Minecraft. At first, using Redstone involved searching for designs that had the functionality that was required. However, as I became more exposed to it, it became increasingly second nature to build circuits based on their constituent logic gates rather than needing to search for schematics. With this learning process came realizations such as the fact that an &lt;span class="caps"&gt;XOR&lt;/span&gt; gate is what controls circuits where two light switches are linked to a single light bulb, or that an &lt;span class="caps"&gt;AND&lt;/span&gt; gate can be constructed as an &lt;span class="caps"&gt;OR&lt;/span&gt; gate with its inputs and output inverted (which &lt;a href="http://en.wikipedia.org/wiki/De_Morgan%27s_laws)"&gt;De Morgan&amp;#8217;s laws&lt;/a&gt; prove). In other words, I learned about logic gates by playing Minecraft &amp;#8212; a peculiar yet satisfying realization. Using boolean logic when programming felt very straightforward despite never having formally learned about&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;My theory of why Redstone was so appealing is that situations arose where building a circuit was necessary in order to overcome a problem in-game. The lack of tangibility of learning boolean logic in a different manner would have probably been discouraging, or at least uninteresting. By learning through Minecraft, it felt substantial, even though in reality, the product being created was only changes made within a video game world. I thought back to this while learning how to program. Most coding examples that novice programmers are supplied with output text to a terminal without producing a tangible product. Many exercises attempt to teach the basics of writing a program, but to someone without much programming experience, it may prove difficult to bridge the cognitive gap between theory and practicality in terms of how lines of code can be applied to real-world&amp;nbsp;scenarios.&lt;/p&gt;
&lt;p&gt;For a while, I limited myself to playing vanilla Minecraft, as I felt that playing the game with mods would tarnish my appreciation of the original game. Having followed various &lt;a href="http://www.guudelp.com"&gt;Mindcrackers&amp;#8217;&lt;/a&gt; &lt;a href="http://feed-the-beast.com"&gt;Feed the Beast&lt;/a&gt; series on YouTube for quite some time, I finally caved and installed the mod pack. This added an immense &amp;#8212; perhaps even unnecessary &amp;#8212; amount of content to the game. The mod that I was most interested in was &lt;a href="http://www.computercraft.info"&gt;ComputerCraft&lt;/a&gt;, written by &lt;a href="http://www.computercraft.info/dan200/"&gt;Daniel Ratcliffe&lt;/a&gt;, which adds various blocks that can be programmed using &lt;a href="http://www.lua.org"&gt;Lua&lt;/a&gt;. Among these blocks are &lt;a href="http://computercraft.info/wiki/Turtle"&gt;Turtles&lt;/a&gt;: robot-like blocks that can be scripted with&amp;nbsp;Lua.&lt;/p&gt;
&lt;p&gt;Something that could disincentive learning to programming is that, at least during the learning stages, the only thing produced is pixels on a screen. In other fields, this is not the case. Even amateur artists can produce visually interesting drawings or paintings, and a musician&amp;#8217;s first composition will probably sound decent, even if it only follows a I-&lt;span class="caps"&gt;IV&lt;/span&gt;-V-I chord progression. On the other hand, programmers who are just beginning to learn their first programming language are typically are greeted with the string &lt;code&gt;Hello World&lt;/code&gt; being printed in front of themselves. Barring the intrinsic reward of having learnt a new skill, this is fairly lacklustre, and I feel that ComputerCraft solves this in an elegant way. By introducing programming through Turtle scripts, the act of programming is repackaged as a task with a clear goal that can be worked towards. For example, if you notice that you&amp;#8217;re lacking iron and diamonds, you could write a script that will instruct a Turtle to mine in search of ores. By adding an extrinsic reward, programming in ComputerCraft becomes more&amp;nbsp;gratifying.&lt;/p&gt;
&lt;p&gt;The terminology used in ComputerCraft is an obvious allusion to the programming language &lt;a href="http://en.wikipedia.org/wiki/Logo_(programming_language)"&gt;Logo&lt;/a&gt;, which was separated from other programming languages existent at the time by its use of &amp;#8220;turtle graphics&amp;#8221;. The language was largely designed for children and other people new to programming. In fact, its Wikipedia article states that &amp;#8220;the design goals of Logo included accessible power and informative error messages&amp;#8221; and that &amp;#8220;virtual Turtles allowed for immediate visual feedback and debugging&amp;#8221;. With Turtles, ComputerCraft allows a novice programmer to use kinaesthetic reasoning to debug the actions of a Turtle in a similar manner as Logo was envisioned to do. Given these points, it can be concluded that ComputerCraft very closely follows the design philosophy of Logo, essentially making it a modern version of what Logo was in the&amp;nbsp;past.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The first major Turtle program that I wrote was a branch mining script. My goal was to write a program that a swarm of Turtles could execute simultaneously to excavate an area for ores. I tend to be meticulous about following patterns when I mine, and when branch mining, this entails digging tunnels with torches every eight blocks. Here is a very basic Turtle script with this&amp;nbsp;functionality.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;lua&lt;/span&gt;
&lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;miningIteration&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;dig&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;digs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;front&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;forward&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;moves&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;forward&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;digUp&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;digs&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;above&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;miningIteration&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;dig&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;eight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;blocks&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;select&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;select&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;inventory&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;slot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;torches&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;placeUp&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;place&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;torch&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;above&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Turtle&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;Assume&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;miningComplete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;controlled&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;by&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;external&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;logic&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;miningComplete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The function &lt;code&gt;miningIteration()&lt;/code&gt; instructs the Turtle to dig the block in front of the Turtle, move forward, and then dig the block above itself. The function is repeated eight times and then the Turtle places a torch. While this is technically a functional mining script, there are a number of improvements that could be made. Here are a few that I implemented into my expanded branch mining&amp;nbsp;script.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://minecraft.gamepedia.com/Gravel"&gt;Gravel&lt;/a&gt; is, in my opinion at least, the one thing in the game that is more annoying than &lt;a href="http://minecraft.gamepedia.com/Creeper"&gt;Creepers&lt;/a&gt;, because it often unexpectedly falls while mining which is can at times be startling. Turtles have an interesting behaviour when mining gravel. Consider the manner in which &lt;code&gt;miningIteration()&lt;/code&gt; has been coded. On first inspection, it may seem that there is no fault in how this would execute: if gravel fell and was obstructing the path of the Turtle, &lt;code&gt;turtle.forward()&lt;/code&gt; would simply fail and the following iteration would dig, and this would repeat until all the gravel was gone. However, the loop that instructs the Turtle to place a torch after each &lt;code&gt;miningIteration()&lt;/code&gt; would increment even though the Turtle did not actually move anywhere and the next torch would be placed less than eight blocks&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;There is a simple enough fix. The &lt;a href="http://computercraft.info/wiki/Turtle_(API)"&gt;Turtle &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; contains functions that allow a Turtle to detect if there is a block in front of, above, or below itself. An improvement to the Turtle would be to detect if there is a block in front of the Turtle and if so, continue digging in front until it there is no block in front. To deal with overhead gravel, the same approach can be taken but by detecting blocks above the Turtle rather than in front of it. Here is the function rewritten to use these detection functions instead of movement&amp;nbsp;functions.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;lua&lt;/span&gt;
&lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;miningIteration&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;detect&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;dig&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;forward&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;detectUp&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;digUp&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this function is still flawed, though the cause of the problem may not be obvious to someone unfamiliar with Minecraft. Although stationary blocks make up the crux of the game, there is another class of objects known as entities, which includes not only boats and minecarts but also falling sand and gravel. Entities have a position, velocity, and rotation, and are affected by the game&amp;#8217;s physics. When the game logic detects that there is no stationary block underneath a sand or gravel block, it is converted into an entity and falls until it lands on another solid block (or falls through the &lt;a href="http://minecraft.gamepedia.com/The_Void"&gt;Void&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If a Turtle were to execute the current version of &lt;code&gt;miningIteration()&lt;/code&gt;, it would quickly become apparent that the Turtle still has problems with gravel. If it encountered a column of gravel above itself, it would move forward during the time that the gravel block above itself is was still falling, leaving a pillar of gravel in the middle of the branch mine. The reason for this is that directly after the Turtle finishes executing &lt;code&gt;turtle.digUp()&lt;/code&gt;, the gravel block is still falling; therefore, &lt;code&gt;turtle.detectUp()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. This causes the Turtle to continue mining instead of properly stopping to mine the gravel above it. This can be solved by pausing the script for just the right amount of time so that it can detect gravel after it had fallen. This timing turned out to be 0.2 seconds, so adding &lt;code&gt;sleep(0.2)&lt;/code&gt; after the digging functions forces the Turtle to halt for a brief period of time, mining gravel&amp;nbsp;correctly.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;#&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nv"&gt;lua&lt;/span&gt;
&lt;span class="nv"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;miningIteration&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;detect&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;dig&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;sleep&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;forward&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;detectUp&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;turtle&lt;/span&gt;.&lt;span class="nv"&gt;digUp&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;sleep&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;.&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another interesting behaviour that needed to be debugged was directional-based. Minecraft has many direction-specific quirks due to the way that the game logic was programmed in. This usually results in either south or west sides of blocks being prioritized in some manner. &lt;code&gt;turtle.placeUp()&lt;/code&gt; instructs a Turtle to place whatever is in the selected block of its inventory above itself. For solid blocks, this is straightforward. However, in the case of non-solid blocks like torches, they will snap to an adjacent block face. The west face is prioritized, followed by the east, north, and south faces&amp;nbsp;successively.&lt;/p&gt;
&lt;p&gt;With regards to torch placement, this directional behaviour means that mining in the northwards and southwards direction requires no special treatment. In the remaining two directions, the torch will be placed on the block in front of the Turtle, and in the next iteration of mining, it will get mined along with the block it is attached to. On its own, ComputerCraft does not provide a way for Turtles to automatically determine what direction they are facing (additional mods can add additional types of Turtles to the game). Utilizing ComputerCraft&amp;#8217;s &lt;a href="http://computercraft.info/wiki/Gps_(API)"&gt;&lt;span class="caps"&gt;GPS&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; to determine the axis along which a Turtle is travelling would be the only way to add this functionality. As I do not have any &lt;span class="caps"&gt;GPS&lt;/span&gt; infrastructure in my world, I opted to have the Turtle simply prompt the user for the direction that it is facing and store it in the variable &lt;code&gt;direction&lt;/code&gt;.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#!&lt;/span&gt;&lt;span class="n"&gt;lua&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;miningIteration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;direction&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;miningIteration&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;extra&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mining&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;iteration&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;back&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;place&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;torch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;placeUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;miningComplete&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this revision, if the Turtle is facing in one of the two problematic directions, it will simply complete an extra iteration of mining and then move backwards one block. When &lt;code&gt;turtle.placeUp()&lt;/code&gt; is called, the torch can no longer attach to the block in front (because it has been mined), so it gets placed on either the left or right wall, circumventing the issue of the torch being destroyed in the next iteration of&amp;nbsp;mining.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In an educational environment, ComputerCraft could be used to create coding assignments for students. An interesting result of this is that all of the students could simply connect to the same &lt;span class="caps"&gt;LAN&lt;/span&gt; world through pit their Turtle scripts against one another in order to determine whose algorithm is the most efficient; after all, friendly competition is always a good motivator. For a younger audience, this would be more engaging than nearly any other approach to teaching programming that I can think of, considering Minecraft&amp;#8217;s popularity with the younger demographic. Perhaps this style of teaching would be better suited for a club or co-curricular activity rather than a class, since all of its participants would need to have Minecraft accounts. That being said, Minecraft has been used in academic settings to teach subjects from &lt;a href="http://www.reddit.com/r/Minecraft/comments/1pk6zl/learning_logic_gates_in_electronics_class/"&gt;logic gates to an electronics class&lt;/a&gt; to &lt;a href="http://www.reddit.com/r/Minecraft/comments/1dvpnj/today_my_teacher_used_minecraft_to_teach/"&gt;perspective in art&lt;/a&gt;. Organizations such as &lt;a href="http://minecraftedu.com"&gt;MinecraftEdu&lt;/a&gt; seek to bring Minecraft into the classroom by offering a discount on bulk sales and also providing a mod to the game that improves the teaching&amp;nbsp;process.&lt;/p&gt;
&lt;p&gt;If something unexpected were to happen to a Turtle on a long mining expedition, it could get stuck, and time and resources would need to be spent in order to locate and retrieve it. To avoid this, it would be wise to debug the Turtle&amp;#8217;s movements in a low-risk environment before actually deploying it on a mining expedition. This might include checking to see how the Turtle would react if a mob wandered in front of the Turtle and obstructed its movement functions, for example. These debugging habits can be applied when the code being written is no longer a Turtle script but rather a more conventional computer&amp;nbsp;program.&lt;/p&gt;
&lt;p&gt;Another benefit of learning programming through ComputerCraft is that ideas for new features or added functionality arise simply by using the program. Perhaps the mining script could be extended to instruct the Turtle to automatically return to the start of the branch when its inventory fills up or throw out unwanted materials and only keep ores. Maybe fuel could be a factor, and it could automatically consume any fuel sources that it mines in order to extend the mining expedition. This process of beginning with a basic program and expanding its functionality can be applied when programming independently of&amp;nbsp;ComputerCraft.&lt;/p&gt;
&lt;p&gt;I believe that ComputerCraft is a great way to teach people who are already interested in Minecraft the basics of programming. Lua is a very beginner friendly language as, much like Logo, it features a syntax similar to normal English. Turtles will almost certainly more engaging to a novice programmer than a Lua prompt. The mod is not only limited to working with Turtles, either; a more traditional approach can be taken to the programming involved. There are a wide variety of programs that various people have written, from basic APIs to &lt;a href="https://github.com/oeed/PearOS"&gt;operating systems with GUIs&lt;/a&gt;. In this age of computing, more unorthodox approaches to teaching and learning can be experimented with, and with ComputerCraft, &lt;s&gt;the sky&lt;/s&gt; &lt;code&gt;Y = 255&lt;/code&gt; is the&amp;nbsp;limit.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Styling Code Blocks Using Pelican</title><link href="http://kevinyap.ca/2013/12/styling-code-blocks-using-pelican/" rel="alternate"></link><published>2013-12-10T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2013-12-10:/2013/12/styling-code-blocks-using-pelican/</id><summary type="html">&lt;p&gt;Although &lt;a href="http://studiostyl.es/schemes/monokai"&gt;Monokai&lt;/a&gt; is my colour scheme of choice when coding in &lt;a href="http://www.sublimetext.com"&gt;Sublime Text 2&lt;/a&gt;, it was not the best option for displaying code blocks on my website. Favouring a lighter colour scheme, I opted to use a GitHub style colour scheme and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Although &lt;a href="http://studiostyl.es/schemes/monokai"&gt;Monokai&lt;/a&gt; is my colour scheme of choice when coding in &lt;a href="http://www.sublimetext.com"&gt;Sublime Text 2&lt;/a&gt;, it was not the best option for displaying code blocks on my website. Favouring a lighter colour scheme, I opted to use a GitHub style colour scheme and also add line numbers (because why not). Referring to a &lt;a href="http://alexpeattie.com/blog/github-style-syntax-highlighting-with-pygments/"&gt;blog post by Alex Peattie&lt;/a&gt; explaining how to implement this using Pygments, I made some modifications to make it work with my website. While the process is largely the same as what he already explained, I felt like writing this Pelican-specific guide on the off chance that it might be useful to somebody in the&amp;nbsp;future.&lt;/p&gt;
&lt;p&gt;While Alex&amp;#8217;s tutorial implemented line numbering using &lt;span class="caps"&gt;CSS&lt;/span&gt;, the &lt;a href="http://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite&lt;/a&gt; extension for &lt;a href="https://pypi.python.org/pypi/Markdown"&gt;Python-Markdown&lt;/a&gt; has the option to add line numbers automatically, which saves a bit of work. To enable them, CodeHilite&amp;#8217;s &lt;code&gt;linenums&lt;/code&gt; setting needs to be set to &lt;code&gt;True&lt;/code&gt;. This can be done through the &lt;code&gt;MD_EXTENSIONS&lt;/code&gt; option in the settings file supplied to&amp;nbsp;Pelican.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!python&lt;/span&gt;
&lt;span class="n"&gt;MD_EXTENSIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;codehilite(linenums = True)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next step is to download a stylesheet that is compatible with Pygments. I used the one &lt;a href="https://github.com/richleland/pygments-css/blob/master/github.css"&gt;linked in Alex&amp;#8217;s tutorial&lt;/a&gt;, but deleted the first line of the file because I did not need to change the background colour of the code block. This stylesheet should be linked to in the base template file of your website &amp;#8212; &lt;code&gt;base.html&lt;/code&gt; for the theme that I am currently&amp;nbsp;using.&lt;/p&gt;
&lt;p&gt;Some custom styling is then done in order to change the appearance of the code blocks. The following three blocks of code would be placed in the primary stylesheet of the site&amp;#8217;s theme. First of all, basic styling is added to the code block to control basic properties of the code, as well as create the border around the code block and ensure that it scrolls correctly if a line of code is too large for the block. While this is generally not an issue when being viewed on a computer screen, it is important for if the code is being viewed on a mobile&amp;nbsp;device.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#!css&lt;/span&gt;
&lt;span class="na"&gt;.codehilitetable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;font-family:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nf"&gt;Source&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;Code&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;Pro&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;monospace&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;font-size:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;12&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;overflow:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;auto&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;display:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;block&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;border:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;solid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="no"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;#d9d9d9;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nl"&gt;border-radius:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;3&lt;/span&gt;&lt;span class="nf"&gt;px&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Following this, the line numbering is styled by modifying the &lt;code&gt;linenos&lt;/code&gt; class. The background of the numbering is made grey, the sides of the actual line numbers are padded, and a border is added separating the numbering from the actual code. The multitude of vendor-prefixed &lt;code&gt;user-select&lt;/code&gt; properties are added in order to make the line numbers unselectable making selecting and copying code a lot&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;The horizontal margins of the &lt;code&gt;codehilite&lt;/code&gt; class, which controls the code itself, are increased to add spacing between the code snippets and the line&amp;nbsp;numbers.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nt"&gt;css&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;linenos&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;border-right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;solid&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#d9d9d9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.8&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kp"&gt;-webkit-&lt;/span&gt;&lt;span class="k"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kp"&gt;-khtml-&lt;/span&gt;&lt;span class="k"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kp"&gt;-moz-&lt;/span&gt;&lt;span class="k"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kp"&gt;-ms-&lt;/span&gt;&lt;span class="k"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;user-select&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;codehilite&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After following these steps, everything should be working properly. Of course, the stylesheet used and properties of the code blocks can be changed depending on personal&amp;nbsp;preference.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Hosting With GitHub Pages</title><link href="http://kevinyap.ca/2013/12/hosting-with-github-pages/" rel="alternate"></link><published>2013-12-07T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2013-12-07:/2013/12/hosting-with-github-pages/</id><summary type="html">&lt;p&gt;Over the past couple of days, I made the switch to using GitHub as the hosting platform for my website by using &lt;a href="http://pages.github.com"&gt;GitHub Pages&lt;/a&gt;. This felt like a natural progression as I already used GitHub for version control for the source of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Over the past couple of days, I made the switch to using GitHub as the hosting platform for my website by using &lt;a href="http://pages.github.com"&gt;GitHub Pages&lt;/a&gt;. This felt like a natural progression as I already used GitHub for version control for the source of my website. I initially thought the move would be confusing and time-consuming, but after the &lt;span class="caps"&gt;DNS&lt;/span&gt; changes propagated, everything was up and running just as it had been before the&amp;nbsp;move.&lt;/p&gt;
&lt;p&gt;When dealing with User Pages with GitHub Pages, the hosted files must be located in the &lt;code&gt;master&lt;/code&gt; branch of the repository. Since I didn&amp;#8217;t want to have separate repositories for the source of the website and for the generated files, I opted to make an orphaned branch named &lt;code&gt;src&lt;/code&gt; which would contain the source files. While I thought this would be complicated, it turned out to be quite&amp;nbsp;straightforward.&lt;/p&gt;
&lt;p&gt;Within the root directory of my website&amp;#8217;s source, there is an &lt;code&gt;output&lt;/code&gt; directory that the static site files generated by &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt; go. Prior to using GitHub Pages, I had written a Bash script that would run the &lt;code&gt;pelican&lt;/code&gt; command to generate the static site files and upload them using &lt;a href="http://en.wikipedia.org/wiki/Rsync"&gt;rsync&lt;/a&gt;. Obviously, this script had to be rewritten, as in order to use GitHub Pages, changes need to be pushed to a Git repository rather than being uploaded to a web&amp;nbsp;server.&lt;/p&gt;
&lt;p&gt;To accomplish this, there are two Git repository: one in the root directory of my website&amp;#8217;s source and one in the output directory. Both remotes are configured to push to the same remote repository stored on GitHub. The local repository in the root directory has the &lt;code&gt;output/&lt;/code&gt; directory in its &lt;code&gt;.gitignore&lt;/code&gt; file and commits to the &lt;code&gt;src&lt;/code&gt; branch while the &lt;code&gt;output/&lt;/code&gt; repository commits to the &lt;code&gt;master&lt;/code&gt; branch. While they are technically part of the same remote repository, each local repository is completely separate from the&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;I created an &lt;span class="caps"&gt;SSH&lt;/span&gt; key so that I do not have to manually authenticate every time &lt;code&gt;git push&lt;/code&gt; is run by my site generation script. (Also because I have two-factor authentication enabled on my GitHub account.) While this did not work initially, it turns out that I was using the wrong remote &lt;span class="caps"&gt;URL&lt;/span&gt;; the proper &lt;span class="caps"&gt;URL&lt;/span&gt; to use over &lt;span class="caps"&gt;SSH&lt;/span&gt; (which in retrospect is quite obvious) is &lt;code&gt;ssh://git@github.com:user/repo.git&lt;/code&gt;, rather than the &lt;span class="caps"&gt;HTTPS&lt;/span&gt; &lt;span class="caps"&gt;URL&lt;/span&gt; that is shown by default on the right side of the page when browsing the repository on&amp;nbsp;GitHub.&lt;/p&gt;
&lt;p&gt;While I use &lt;a href="http://mac.github.com"&gt;GitHub for Mac&lt;/a&gt; to manage the repository for the source files (the &lt;code&gt;src&lt;/code&gt; branch), the repository for the &lt;code&gt;output/&lt;/code&gt; directory is only modified by the site generation script. Making use of &lt;a href="https://help.github.com/articles/github-flavored-markdown"&gt;GitHub Flavoured Markdown&lt;/a&gt;, the commit messages in the &lt;code&gt;master&lt;/code&gt; branch contain links to the most recent commit in the &lt;code&gt;src&lt;/code&gt; branch. When viewing the &lt;code&gt;master&lt;/code&gt; branch on GitHub, the &lt;a href="http://en.wikipedia.org/wiki/SHA-1"&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt; hashes&lt;/a&gt; automagically link to the corresponding commits in the &lt;code&gt;src&lt;/code&gt; branch that generated the changes in the static site files, making it easy to determine what changes in the source files led to changes in the generated&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;To achieve this, the script runs the following code after the &lt;code&gt;pelican&lt;/code&gt; command generates the static site&amp;nbsp;files.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!bash&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$sourceDirectory&lt;/span&gt;
&lt;span class="nv"&gt;commitHash&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;rev-parse&lt;span class="w"&gt; &lt;/span&gt;HEAD&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;$outputDirectory&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;add&lt;span class="w"&gt; &lt;/span&gt;-A
git&lt;span class="w"&gt; &lt;/span&gt;checkout&lt;span class="w"&gt; &lt;/span&gt;master
&lt;span class="nb"&gt;read&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-p&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Extended commit message: &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;commitMessage
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-z&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$commitMessage&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Generated by &lt;/span&gt;&lt;span class="nv"&gt;$commitHash&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;git&lt;span class="w"&gt; &lt;/span&gt;commit&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Generated by &lt;/span&gt;&lt;span class="nv"&gt;$commitHash&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;-m&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$commitMessage&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
git&lt;span class="w"&gt; &lt;/span&gt;push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The command &lt;code&gt;git rev-parse HEAD&lt;/code&gt; returns the hash of the last commit in the Git repository&amp;#8217;s history and is stored in the variable &lt;code&gt;$commitHash&lt;/code&gt;. The directory is then changed to &lt;code&gt;output/&lt;/code&gt; and &lt;code&gt;git checkout&lt;/code&gt; is run to ensure the branch that changes will be committed to is the &lt;code&gt;master&lt;/code&gt; branch (not that it should change, but in case I were to accidentally change branches manually, this would prevents anything problematic from happening). Any changes made are then added via &lt;code&gt;git add -A&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Following this, the script prompts for an extended commit message (what gets shown on GitHub after expanding the message). The first line of the commit message is &amp;#8220;Generated by&amp;#8221; followed by the hash of the last commit made in the &lt;code&gt;src&lt;/code&gt; branch, and if an extended commit message is provided, the script will add it in. Finally, the commit is pushed to the &lt;code&gt;master&lt;/code&gt; branch on&amp;nbsp;GitHub.&lt;/p&gt;
&lt;p&gt;All in all, this solution seems to work very well. I would highly recommend using GitHub Pages for static&amp;nbsp;sites.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>The Great (White) Pelican Migration</title><link href="http://kevinyap.ca/2013/07/the-great-white-pelican-migration/" rel="alternate"></link><published>2013-07-14T00:00:00-07:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2013-07-14:/2013/07/the-great-white-pelican-migration/</id><summary type="html">&lt;p&gt;When browsing &lt;a href="http://www.reddit.com/r/programming"&gt;/r/programming&lt;/a&gt; a while back, I came across a link to a blog post written by &lt;a href="http://www.gregreda.com"&gt;Greg Reda&lt;/a&gt;. While reading the post, I noticed the platform that his website was generated with &amp;#8212; &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; &amp;#8212; and at the time, I was in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When browsing &lt;a href="http://www.reddit.com/r/programming"&gt;/r/programming&lt;/a&gt; a while back, I came across a link to a blog post written by &lt;a href="http://www.gregreda.com"&gt;Greg Reda&lt;/a&gt;. While reading the post, I noticed the platform that his website was generated with &amp;#8212; &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; &amp;#8212; and at the time, I was in the process of searching for a replacement for WordPress. When I initially created kevinyap.ca, WordPress was appealing due to being easy-to-install &lt;span class="caps"&gt;CMS&lt;/span&gt; and versatile in its support and compatibility (themes and plugins), but over time I realized that it was too bulky; what I actually needed was a simple blogging platform rather than a full-fledged &lt;span class="caps"&gt;CMS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I decided that it would be wise to make the move to another platform sooner rather than later, so I began the migration to Pelican. The transition from WordPress to Pelican was quite simple; the installation itself was fairly straightforward, and I manually transferred over my previous blog posts. (Pelican does have an automatic blog importer, but with the tiny number of previous posts, it was simpler to just complete the process&amp;nbsp;manually.)&lt;/p&gt;
&lt;p&gt;In my opinion, one of the most appealing features of using Pelican for a blog is the fact that posts (and pages) can be composed in Markdown, an easy-to-use and familiar markup language. This change also made it easier to incorporate &lt;a href="http://www.iawriter.com/"&gt;iA Writer&lt;/a&gt; into my blog-writing workflow instead of fumbling around with the WordPress dashboard consistently. Also, iA Writer’s iCloud integration makes it easy to write&amp;nbsp;anywhere.&lt;/p&gt;
&lt;p&gt;One minor hitch that I had was with setting up the &lt;a href="http://pythonhosted.org/Markdown/extensions/code_hilite.html"&gt;CodeHilite&lt;/a&gt; extension for Markdown. In the configuration file for Pelican, I had the entry &lt;code&gt;MD_EXTENSIONS = ['codehilite']&lt;/code&gt;, as the documentation stated that &lt;code&gt;MD_EXTENSIONS&lt;/code&gt; needed to be defined as a list. Although this did not raise any warnings when generating the site through Pelican. When I added the &lt;a href="http://pythonhosted.org/Markdown/extensions/extra.html"&gt;Markdown Extra&lt;/a&gt; to the list of extensions &amp;#8212; &lt;code&gt;MD_EXTENSIONS = ['codehilite', 'extra']&lt;/code&gt; &amp;#8212; the code highlighting worked. Apparently there needed to be more than one item in the list of Markdown&amp;nbsp;extensions.&lt;/p&gt;
&lt;p&gt;Many thanks to Greg Reda whose Pelican theme (which can be found in the &lt;a href="http://github.com/gjreda/gregreda.com"&gt;GitHub repository&lt;/a&gt; for his website) I am currently using on my&amp;nbsp;website.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>The Power of AppleScript</title><link href="http://kevinyap.ca/2012/11/the-power-of-applescript/" rel="alternate"></link><published>2012-11-28T00:00:00-08:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2012-11-28:/2012/11/the-power-of-applescript/</id><summary type="html">&lt;p&gt;One of my favourite genres of music is video game music. Because of this, it was no surprise that I was ecstatic when OverClocked ReMix announced that ReMixes 1-2500 were available to download via torrent, and that every file contained &amp;#8220;complete and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my favourite genres of music is video game music. Because of this, it was no surprise that I was ecstatic when OverClocked ReMix announced that ReMixes 1-2500 were available to download via torrent, and that every file contained &amp;#8220;complete and consistent &lt;span class="caps"&gt;ID3&lt;/span&gt; tags&amp;#8221;. While the tags for most fields are great, I wasn&amp;#8217;t particularly fond of the format of the track titles. Instead of &lt;em&gt;TrackName (GameName)&lt;/em&gt; like I would have preferred, the format was &lt;em&gt;GameName &amp;#8216;TrackName&amp;#8217; &lt;span class="caps"&gt;OC&lt;/span&gt; ReMix&lt;/em&gt;. There are a few reasons why I don&amp;#8217;t like the provided format (namely that the &amp;#8220;&lt;span class="caps"&gt;OC&lt;/span&gt; ReMix&amp;#8221; suffix feels redundant to me and it feels more appropriate to not see the songs grouped by their source game), but that&amp;#8217;s besides the&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;Obviously, manually renaming nearly 2500 tracks in iTunes would be a ridiculous undertaking. Luckily, AppleScript happens to be the perfect tool to automate this task. While I had never used AppleScript previous to this, the syntax was easy enough to learn quickly. &lt;a href="http://dougscripts.com/itunes/"&gt;Doug&amp;#8217;s AppleScripts for iTunes&lt;/a&gt; proved itself to be a useful resource for learning (and happens to be where I downloaded other scripts from in the past). It is also where I derived the skeleton of this script from. At first, I attempted to figured out how to handle regular expressions within strings in AppleScript, but I soon realized that a crude piece of code would work just as well; it just wouldn&amp;#8217;t be useful for any other situation. I set off in search of AppleScript documentation to learn to to manipulate the track name string in the way that I&amp;nbsp;wanted.&lt;/p&gt;
&lt;p&gt;The easiest part of the track title to manipulate was removing the &lt;em&gt;&lt;span class="caps"&gt;OC&lt;/span&gt; ReMix&lt;/em&gt; text at the end of every track. The way I did it was by setting the track name track to itself after removing 9 characters from the end of the string (as it includes the leading space character). With AppleScript, this was very easy to do: &lt;code&gt;set trackName to text 1 thru -10 of trackName&lt;/code&gt; (&lt;code&gt;-1&lt;/code&gt; represents the last character in the string, so &lt;code&gt;-2&lt;/code&gt; would remove the last character, and so&amp;nbsp;on).&lt;/p&gt;
&lt;p&gt;After that, to search for the part of the string that contained the song name, I initially tried looking for the first apostrophe in the track title and used the next character as the beginning of the song name string, and ended the string one character before the end of the track title. In most cases, this would (as expected) take the text between the apostrophes &amp;#8212; the song name &amp;#8212; and store it in a dedicated song name string. Great! Fortunately, I tested this script in batches of 10 tracks or so at a time and manually vetted the result, as this definitely did not work. The flaw with this method may already be obvious; if the game name itself contained an apostrophe (for example, Legend of Zelda: Link&amp;#8217;s Awakening), the script would use all the characters after this apostrophe until the final apostrophe as the song name, which is&amp;nbsp;incorrect.&lt;/p&gt;
&lt;p&gt;The fix for this was simple enough. Instead of searching for the first apostrophe within the track title, I searched for the first space followed directly by an apostrophe, and altered the values that affect the length of the strings&amp;nbsp;accordingly.&lt;/p&gt;
&lt;p&gt;All in all, the script was certainly not pretty, but it did the job. I didn&amp;#8217;t notice any incorrectly reformatted names at first glance, but it is possible that a few oddly named songs were incorrectly renamed. I guess my point is that AppleScript was easy enough to work with (given rudimentary knowledge of how other programming languages function) that I was able to hack this very specifically-purposed script together in a short amount of time. Most of the code is based on words in English making it accessible to people who have never programmed before, and the AppleScript Editor gives an alert when saving or running the code if it is&amp;nbsp;invalid.&lt;/p&gt;
&lt;p&gt;If you want to use the script to rename to your own tracks (or just to examine my shoddily thrown together code), here is the source code; to use the script, copy it into AppleScript Editor, select the tracks in iTunes, and run&amp;nbsp;it.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;#!applescript&lt;/span&gt;
&lt;span class="n"&gt;tell&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;iTunes&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;selection&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trackName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trackName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Strip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; OC ReMix&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;characters&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trackName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;thru&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trackName&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;location&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;begins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;songTitleBegins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trackName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Store&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;song&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;songName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;songName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;songTitleBegins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;thru&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trackName&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;game&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gameTitle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;thru&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;songTitleBegins&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trackName&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newTrackName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;songName&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;gameTitle&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;)&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newly&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;formatted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;newTrackName&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tell&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>Hello, Blogosphere!</title><link href="http://kevinyap.ca/2011/10/hello-blogosphere/" rel="alternate"></link><published>2011-10-15T19:35:00-07:00</published><updated>2023-10-19T04:37:07-07:00</updated><author><name></name></author><id>tag:kevinyap.ca,2011-10-15:/2011/10/hello-blogosphere/</id><summary type="html">&lt;p&gt;After much consideration, I&amp;#8217;ve finally decided to start a blog. One reason is to expand my writing skills (I don&amp;#8217;t write nearly enough), but the main reason I&amp;#8217;ve decided to do so is because I now have my own …&lt;/p&gt;</summary><content type="html">&lt;p&gt;After much consideration, I&amp;#8217;ve finally decided to start a blog. One reason is to expand my writing skills (I don&amp;#8217;t write nearly enough), but the main reason I&amp;#8217;ve decided to do so is because I now have my own space on the Internet to write about, well, anything&amp;nbsp;really.&lt;/p&gt;
&lt;p&gt;I suppose this is the obligatory mini-biography post, so here goes. I&amp;#8217;m a high school student living in Vancouver, Canada. I quite enjoy school, which I suppose is a good quality. I play the piano, and my favourite sport (to play) is Ultimate Frisbee, which is apparently very popular in the Pacific Northwest, something I wasn&amp;#8217;t aware of until I started playing. Music is one of my passions, and I enjoy composing music in my free time. I&amp;#8217;m also very interested in programming, and there&amp;#8217;s quite a story behind how I became interested in&amp;nbsp;it.&lt;/p&gt;
&lt;p&gt;One Christmas, I got an iPod Touch as a present from my parents. It was a first generation iPod Touch, only running iPhone &lt;span class="caps"&gt;OS&lt;/span&gt; 1.1 at the time (it wasn&amp;#8217;t even called iOS back then). It was an amazing device, but the issue was there were no apps for it. The concept of third-party apps wasn&amp;#8217;t even existent. iPhone &lt;span class="caps"&gt;OS&lt;/span&gt; 1.1.3 added &amp;#8220;Web Clips&amp;#8221;, which were essentially pseudo-apps, or in other words, glorified bookmarks. What was truly amazing, though, was the release of iPhone &lt;span class="caps"&gt;OS&lt;/span&gt; 2.0. This &lt;span class="caps"&gt;OS&lt;/span&gt; update contained the debut of the App Store, and it was outstanding. The fact that you could find a game that looked interesting, buy it, and have it playable within a matter of minutes was mind-blowing. To put icing on the cake, the highly awaited games such as Enigmo and Super Monkey Ball were only $10 each, much less than games on any other console (although now, they&amp;#8217;re $1 and $3 respectively; that&amp;#8217;s a blog post for another time). Most apps and games were around the $3–5 range at the time, and only your Apple &lt;span class="caps"&gt;ID&lt;/span&gt; password stood between you and a shiny new program for your&amp;nbsp;iDevice.&lt;/p&gt;
&lt;p&gt;When I learned that, unlike the other game consoles at the time, there was essentially no barrier to entry for programming iOS apps, I immediately checked it out. I downloaded Xcode and the iPhone &lt;span class="caps"&gt;SDK&lt;/span&gt; and messed around with it. I made very rudimentary apps, but nothing at all that was App Store-worthy. Eventually, I found a tutorial that explained how to make a basic Breakout-esque game, which I was pretty proud of. However, I soon realized that while I could follow a tutorial, I wasn&amp;#8217;t able to code on my own. I took a break from Objective-C for a while, and got a book on C. I also bought the &lt;span class="caps"&gt;PDF&lt;/span&gt; version of &lt;a href="http://learnpythonthehardway.org/"&gt;Learn Python the Hard Way&lt;/a&gt;, and worked my way through it. While I&amp;#8217;m gaining a better grasp on the concept of coding, I&amp;#8217;m still nowhere near being a programmer; I&amp;#8217;m slowly working on it though! As of now, I&amp;#8217;ve decided to take a break with learning how to program, and instead focus on other things, like making this&amp;nbsp;blog.&lt;/p&gt;
&lt;p&gt;After having the idea to start a blog, I researched various blogging platforms, but it quickly became evident that I should use WordPress. Between being open-source, having the ability to be a &lt;span class="caps"&gt;CMS&lt;/span&gt; as well as a blog, and having a native-iOS app that I can potentially contribute to in the future, I knew it was the right choice. I&amp;#8217;m currently hosting my website with the great guys at &lt;a href="http://laughingsquid.us/"&gt;Laughing Squid&lt;/a&gt;, and here I am&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;At the moment, there are a few things I still need to take care of. Firstly, I need a title for my blog. Something clever and funny, but not cheesy. (Or perhaps so cheesy that it&amp;#8217;s funny and clever. Time will tell.) Personally, I quite like the look of the Twenty Eleven theme, even if it does gives off a &lt;em&gt;default blog&lt;/em&gt; vibe. So far, I haven&amp;#8217;t found any other themes that I particularly like, but I&amp;#8217;ll keep looking. Perhaps I&amp;#8217;ll even spring for a premium theme at some&amp;nbsp;point.&lt;/p&gt;
&lt;p&gt;So there it is, my attempt at a first blog&amp;nbsp;post.&lt;/p&gt;</content><category term="misc"></category></entry></feed>